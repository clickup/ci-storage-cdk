// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CiStorage 1`] = `
{
  "Description": "A stack to generate unit tests for CiStorage construct",
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValuetestimageSsmNameC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "test-imageSsmName",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "CnstrctAsgRunnerASG489B3A08": {
      "Properties": {
        "AutoScalingGroupName": "stk-cnstrct-asgrunner",
        "Cooldown": "30",
        "DefaultInstanceWarmup": 60,
        "MaxInstanceLifetime": 86400,
        "MaxSize": "20",
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
          },
        ],
        "MinSize": "1",
        "MixedInstancesPolicy": {
          "InstancesDistribution": {
            "OnDemandAllocationStrategy": "lowest-price",
            "OnDemandPercentageAboveBaseCapacity": 10,
            "SpotAllocationStrategy": "price-capacity-optimized",
          },
          "LaunchTemplate": {
            "LaunchTemplateSpecification": {
              "LaunchTemplateId": {
                "Ref": "CnstrctLtAEEE5196",
              },
              "Version": {
                "Fn::GetAtt": [
                  "CnstrctLtAEEE5196",
                  "LatestVersionNumber",
                ],
              },
            },
            "Overrides": [
              {
                "InstanceRequirements": {
                  "MemoryMiB": {
                    "Max": 16384,
                    "Min": 8192,
                  },
                  "VCpuCount": {
                    "Max": 8,
                    "Min": 4,
                  },
                },
              },
            ],
          },
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "my-ci-runner",
          },
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
            "InstanceRefresh",
          ],
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "CnstrctAsgRunnerActiveRunnersPercentLowerAlarm3D348E7B": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "CnstrctAsgRunnerActiveRunnersPercentLowerPolicy9E822646",
          },
        ],
        "AlarmDescription": "Lower threshold scaling alarm",
        "ComparisonOperator": "LessThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "GH_REPOSITORY",
            "Value": "time-loop/slapdash",
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ActiveRunnersPercent",
        "Namespace": "ci-storage/metrics",
        "Period": 600,
        "Statistic": "Maximum",
        "Tags": [
          {
            "Key": "Name",
            "Value": "my-ci-runner",
          },
        ],
        "Threshold": 63,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "CnstrctAsgRunnerActiveRunnersPercentLowerPolicy9E822646": {
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "CnstrctAsgRunnerASG489B3A08",
        },
        "MetricAggregationType": "Maximum",
        "PolicyType": "StepScaling",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": -7,
            "MetricIntervalUpperBound": 0,
            "ScalingAdjustment": -10,
          },
          {
            "MetricIntervalLowerBound": -14,
            "MetricIntervalUpperBound": -7,
            "ScalingAdjustment": -20,
          },
          {
            "MetricIntervalLowerBound": -21,
            "MetricIntervalUpperBound": -14,
            "ScalingAdjustment": -30,
          },
          {
            "MetricIntervalLowerBound": -28,
            "MetricIntervalUpperBound": -21,
            "ScalingAdjustment": -40,
          },
          {
            "MetricIntervalLowerBound": -35,
            "MetricIntervalUpperBound": -28,
            "ScalingAdjustment": -50,
          },
          {
            "MetricIntervalLowerBound": -42,
            "MetricIntervalUpperBound": -35,
            "ScalingAdjustment": -60,
          },
          {
            "MetricIntervalLowerBound": -49,
            "MetricIntervalUpperBound": -42,
            "ScalingAdjustment": -70,
          },
          {
            "MetricIntervalLowerBound": -56,
            "MetricIntervalUpperBound": -49,
            "ScalingAdjustment": -80,
          },
          {
            "MetricIntervalUpperBound": -56,
            "ScalingAdjustment": -90,
          },
        ],
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "CnstrctAsgRunnerActiveRunnersPercentUpperAlarm9D4818B9": {
      "Properties": {
        "AlarmActions": [
          {
            "Ref": "CnstrctAsgRunnerActiveRunnersPercentUpperPolicy07F985DA",
          },
        ],
        "AlarmDescription": "Upper threshold scaling alarm",
        "ComparisonOperator": "GreaterThanOrEqualToThreshold",
        "DatapointsToAlarm": 1,
        "Dimensions": [
          {
            "Name": "GH_REPOSITORY",
            "Value": "time-loop/slapdash",
          },
        ],
        "EvaluationPeriods": 1,
        "MetricName": "ActiveRunnersPercent",
        "Namespace": "ci-storage/metrics",
        "Period": 600,
        "Statistic": "Maximum",
        "Tags": [
          {
            "Key": "Name",
            "Value": "my-ci-runner",
          },
        ],
        "Threshold": 70,
      },
      "Type": "AWS::CloudWatch::Alarm",
    },
    "CnstrctAsgRunnerActiveRunnersPercentUpperPolicy07F985DA": {
      "Properties": {
        "AdjustmentType": "PercentChangeInCapacity",
        "AutoScalingGroupName": {
          "Ref": "CnstrctAsgRunnerASG489B3A08",
        },
        "MetricAggregationType": "Maximum",
        "PolicyType": "StepScaling",
        "StepAdjustments": [
          {
            "MetricIntervalLowerBound": 0,
            "MetricIntervalUpperBound": 3,
            "ScalingAdjustment": 4,
          },
          {
            "MetricIntervalLowerBound": 3,
            "MetricIntervalUpperBound": 6,
            "ScalingAdjustment": 9,
          },
          {
            "MetricIntervalLowerBound": 6,
            "MetricIntervalUpperBound": 9,
            "ScalingAdjustment": 13,
          },
          {
            "MetricIntervalLowerBound": 9,
            "MetricIntervalUpperBound": 12,
            "ScalingAdjustment": 17,
          },
          {
            "MetricIntervalLowerBound": 12,
            "MetricIntervalUpperBound": 15,
            "ScalingAdjustment": 21,
          },
          {
            "MetricIntervalLowerBound": 15,
            "MetricIntervalUpperBound": 18,
            "ScalingAdjustment": 26,
          },
          {
            "MetricIntervalLowerBound": 18,
            "MetricIntervalUpperBound": 21,
            "ScalingAdjustment": 30,
          },
          {
            "MetricIntervalLowerBound": 21,
            "MetricIntervalUpperBound": 24,
            "ScalingAdjustment": 34,
          },
          {
            "MetricIntervalLowerBound": 24,
            "MetricIntervalUpperBound": 27,
            "ScalingAdjustment": 39,
          },
          {
            "MetricIntervalLowerBound": 27,
            "ScalingAdjustment": 43,
          },
        ],
      },
      "Type": "AWS::AutoScaling::ScalingPolicy",
    },
    "CnstrctAsgRunnerScheduledActionCaWorkDayEnds81158DAD": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctAsgRunnerASG489B3A08",
        },
        "MinSize": 5,
        "Recurrence": "0 18 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctAsgRunnerScheduledActionCaWorkDayStarts6A1CC23B": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctAsgRunnerASG489B3A08",
        },
        "MinSize": 10,
        "Recurrence": "0 8 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctHostRole5DD9F366": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2RoleforSSM",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchAgentServerPolicy",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ec2-ssh-key/",
                        {
                          "Fn::GetAtt": [
                            "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                            "KeyPairName",
                          ],
                        },
                        "/private*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "KeyPairPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ci-storage/gh-token*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GhTokenPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeInstances",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudformation:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":stack/Stk/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SignalResourcePolicy",
          },
        ],
        "RoleName": "StkCnstrctHostRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctLtAEEE5196": {
      "DependsOn": [
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 50,
                "VolumeType": "gp2",
              },
            },
          ],
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "CnstrctLtProfileE3059BA8",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Ref": "SsmParameterValuetestimageSsmNameC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "KeyName": {
            "Fn::GetAtt": [
              "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
              "KeyPairName",
            ],
          },
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 2,
            "HttpTokens": "required",
          },
          "Monitoring": {
            "Enabled": true,
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "CnstrctSgF5C70BA4",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/Lt",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/Lt",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#cloud-config
timezone: America/Los_Angeles
swap:
  filename: /var/swapfile
  size: auto
  maxsize: 8589934592
mounts:
  - - tmpfs
    - /var/lib/docker
    - tmpfs
    - defaults,noatime,exec,mode=0710,nr_inodes=0,size=4G
    - "0"
    - "0"
apt_sources:
  - source: deb https://cli.github.com/packages stable main
    keyid: 23F3D4EA75716059
    filename: github-cli.list
  - source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
    keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    filename: docker.list
packages:
  - awscli
  - gh
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose-plugin
  - qemu
  - qemu-user-static
  - binfmt-support
  - git
  - gosu
  - mc
  - curl
  - apt-transport-https
  - ca-certificates
  - tzdata
  - atop
  - iotop
  - htop
  - bwm-ng
  - jq
write_files:
  - path: /etc/sysctl.d/enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - path: /etc/default/atop
    content: |
      LOGOPTS="-R"
      LOGINTERVAL=15
      LOGGENERATIONS=4
  - path: /etc/environment
    append: true
    content: |
      TZ="America/Los_Angeles"
  - path: /etc/environment
    append: true
    content: |
      LESS="RS"
  - path: /etc/docker/daemon.json
    permissions: "0644"
    content: |
      {
        "log-driver": "syslog",
        "log-opts": {
          "tag": "docker/{{.Name}}"
        },
        "runtimes": {
          "sysbox-runc": {
            "path": "/usr/bin/sysbox-runc"
          }
        },
        "default-runtime": "sysbox-runc",
        "userns-remap": "sysbox"
      }
  - path: /var/lib/cloud/scripts/per-once/apply-services-configs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      service atop restart || true
      sysctl --system
  - path: /var/lib/cloud/scripts/per-once/increase-docker-shutdown-timeout.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      sed -i -E '/TimeoutStartSec=.*/a TimeoutStopSec=3600' /usr/lib/systemd/system/docker.service
      systemctl daemon-reload
  - path: /var/lib/cloud/scripts/per-once/add-ubuntu-user-to-docker-group-to-access-socket.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -aG docker ubuntu
  - path: /var/lib/cloud/scripts/per-once/install-sysbox-for-docker-in-docker.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl stop docker docker.socket || true
      wget -nv -O /tmp/sysbox-ce.deb "https://downloads.nestybox.com/sysbox/releases/v0.6.4/sysbox-ce_0.6.4-0.linux_$(dpkg --print-architecture).deb"
      dpkg -i /tmp/sysbox-ce.deb
      rm -f /tmp/sysbox-ce.deb
  - path: /var/lib/cloud/scripts/per-once/switch-ssm-user-to-ubuntu-on-login.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo '[ "$0$@" = "sh" ] && ENV= sudo -u ubuntu -i' > /etc/profile.ssm-user
      mkdir -p /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d/
      (
        echo '[Service]'
        echo 'Environment="ENV=/etc/profile.ssm-user"'
      ) > /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d/sh-env.conf
      systemctl daemon-reload
      systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service || true
  - path: /etc/rsyslog.d/01-docker-tag-to-serial-console.conf
    permissions: "0644"
    content: |
      if $syslogtag startswith 'docker/' then -/dev/console
      # It will also write to /var/log/syslog as usual.
  - path: /var/lib/cloud/scripts/per-once/allow-rsyslog-write-to-serial-console.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -a -G tty syslog
      systemctl restart rsyslog
  - path: /var/lib/cloud/scripts/per-boot/run-docker-compose-on-boot.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo "*/2 * * * * ubuntu /home/ubuntu/run-docker-compose.sh --no-logs 2>&1 | logger -t docker/run-docker-compose" > /etc/cron.d/run-docker-compose
      exec /home/ubuntu/run-docker-compose.sh
  - path: /home/ubuntu/run-docker-compose.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash

      # Switch to non-privileged user if running as root.
      if [[ $(whoami) != "ubuntu" ]]; then
        exec gosu ubuntu "$BASH_SOURCE" "$@"
      fi

      # Ensure there is only one instance of this script running.
      exec {FD}<$BASH_SOURCE
      flock -n "$FD" || { echo "Already running."; exit 0; }
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      # Make sure we're using the right timezone; it may be not up
      # to date in the current environment during the very 1st run
      # from run-docker-compose-on-boot.sh.
      source /etc/environment
      export TZ

      # Load private and public keys from Secrets Manager to ~/.ssh.
      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      aws secretsmanager get-secret-value \\
        --secret-id "ec2-ssh-key/",
                  {
                    "Fn::GetAtt": [
                      "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                      "KeyPairName",
                    ],
                  },
                  "/private" \\
        --query SecretString --output text \\
        > ~/.ssh/ci-storage
      chmod 600 ~/.ssh/ci-storage
      ssh-keygen -f ~/.ssh/ci-storage -y > ~/.ssh/ci-storage.pub

      # Load GitHub PAT from Secrets Manager and log in to GitHub.
      aws secretsmanager get-secret-value \\
        --secret-id "ci-storage/gh-token" \\
        --query SecretString --output text \\
        | gh auth login --with-token
      gh auth setup-git

      # Log in to ghcr.io every hour.
      config=~/.docker/config.json
      if [[ ! -f $config ]] || find "$config" -type f -mmin +60 | grep -q .; then
        gh auth token | docker login ghcr.io -u "$(gh api user -q .login)" --password-stdin
      fi

      # Pull the repository.
      mkdir -p ~/git && cd ~/git
      if [[ ! -d .git ]]; then
        git clone -n --depth=1 --filter=tree:0  "https://github.com/dimikot/ci-storage" .
        if [[ "docker" != "." ]]; then
          git sparse-checkout set --no-cone "docker"
        fi
        git checkout
      else
        git pull --rebase
      fi

      # Process some tokens and print rate limits without xtrace.
      set +o xtrace
      GH_TOKEN=$(gh auth token)
      echo "Docker Hub Rate Limits:"
      docker_hub_token=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token || true)
      curl -s --head -H "Authorization: Bearer $docker_hub_token" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest | grep ratelimit || true
      echo "GitHub Core Rate Limits:"
      gh api -i -X HEAD /rate_limit | grep Ratelimit
      set -o xtrace

      # Export env vars for docker compose.
      export GH_TOKEN
      export GH_REPOSITORY="time-loop/slapdash"
      export GH_LABELS="my-ci,ci-storage"
      export FORWARD_HOST="my-ci-host-001.test-zoneName"

      # It it's the very 1st run, start Docker service. We do not start it every run,
      # because otherwise we wouldn't be able to "systemctl stop docker docker.socket"
      # manually or while copying files from the old host.
      file=~/.docker-started-after-first-git-clone
      if [[ ! -f $file ]]; then
        sudo systemctl start docker docker.socket
        touch $file
      fi

      # Run docker compose.
      cd "docker"
      docker pull ghcr.io/dimikot/ci-storage:main || true
      docker pull ghcr.io/dimikot/ci-runner:main || true
      docker compose up --build --remove-orphans -d
      sleep 5
      if [[ "$1" != "--no-logs" ]]; then
        docker compose logs -n 10
      fi
      docker system prune --volumes -f
  - path: /home/ubuntu/.bash_profile
    owner: ubuntu:ubuntu
    permissions: "0644"
    defer: true
    content: |
      #!/bin/bash
      C_CMD="\\033[0;36m"
      C_NO="\\033[0m"
      if [[ -d ~/git/"docker" ]]; then
        cd ~/git/"docker"
        echo -e "$C_CMD\\$ docker compose ps$C_NO"
        docker --log-level=ERROR compose ps --format="table {{.Service}}\\t{{.Status}}\\t{{.Ports}}"
        services=$(docker compose ps --format '{{.Service}}' 2>/dev/null)
        if [[ "$services" != "" && $(echo "$services" | wc -l) -eq 1 ]]; then
          cmd="docker compose exec $services bash -l"
          echo -e "$C_CMD\\$ $cmd$C_NO"
          eval "$cmd"
        fi
      fi
",
                ],
              ],
            },
          },
        },
        "LaunchTemplateName": "stk-cnstrct-lt",
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Stk/Cnstrct/Lt",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "CnstrctLtProfileE3059BA8": {
      "Properties": {
        "Roles": [
          {
            "Ref": "CnstrctRunnerRole341E54FA",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "CnstrctMyCiHost001A9DE30324": {
      "Properties": {
        "HostedZoneId": "test-hostedZoneId",
        "Name": "my-ci-host-001.test-zoneName.",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "CnstrctStkCnstrctMyCiHost001InstanceCCA3759A90e3e9f8dfbab5f0",
              "PrivateIp",
            ],
          },
        ],
        "TTL": "60",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "CnstrctRunnerRole341E54FA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2RoleforSSM",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchAgentServerPolicy",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ec2-ssh-key/",
                        {
                          "Fn::GetAtt": [
                            "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                            "KeyPairName",
                          ],
                        },
                        "/private*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "KeyPairPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ci-storage/gh-token*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GhTokenPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeInstances",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "cloudformation:SignalResource",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":cloudformation:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":stack/Stk/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "SignalResourcePolicy",
          },
        ],
        "RoleName": "StkCnstrctRunnerRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctSgF5C70BA4": {
      "Properties": {
        "GroupDescription": "stk-cnstrct-sg",
        "GroupName": "stk-cnstrct-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "stk-cnstrct-sg",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C74100223764E466": {
      "Properties": {
        "Description": "from runners and host to ci-storage container",
        "FromPort": 10022,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 10022,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C74226B452137": {
      "Properties": {
        "Description": "from runners and host to SSH",
        "FromPort": 22,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 22,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C744200042042B0BB20A9": {
      "Properties": {
        "Description": "from runners and host to test ports",
        "FromPort": 42000,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 42042,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": "Used to access ci-storage host from self-hosted runner nodes.",
        "ExposePublicKey": false,
        "KmsPrivate": "alias/aws/secretsmanager",
        "KmsPublic": "alias/aws/secretsmanager",
        "Name": "stk-cnstrct-sshidrsa",
        "PublicKey": "",
        "PublicKeyFormat": "OPENSSH",
        "RemoveKeySecretsAfterDays": 0,
        "SecretPrefix": "ec2-ssh-key/",
        "ServiceToken": {
          "Fn::GetAtt": [
            "EC2KeyNameManagerLambdaBE629145",
            "Arn",
          ],
        },
        "StackName": "Stk",
        "StorePublicKey": false,
        "Tags": {
          "CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
        },
      },
      "Type": "Custom::EC2-Key-Pair",
      "UpdateReplacePolicy": "Delete",
    },
    "CnstrctStkCnstrctMyCiHost001InstanceCCA3759A90e3e9f8dfbab5f0": {
      "CreationPolicy": {
        "ResourceSignal": {
          "Count": 1,
          "Timeout": "PT15M",
        },
      },
      "DependsOn": [
        "CnstrctHostRole5DD9F366",
      ],
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "BlockDeviceMappings": [
          {
            "DeviceName": "/dev/sda1",
            "Ebs": {
              "DeleteOnTermination": true,
              "Encrypted": true,
              "VolumeSize": 20,
              "VolumeType": "gp2",
            },
          },
        ],
        "IamInstanceProfile": {
          "Ref": "CnstrctStkCnstrctMyCiHost001InstanceInstanceProfile2045E5AE",
        },
        "ImageId": {
          "Ref": "SsmParameterValuetestimageSsmNameC96584B6F00A464EAD1953AFF4B05118Parameter",
        },
        "InstanceType": "t3.large",
        "KeyName": {
          "Fn::GetAtt": [
            "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
            "KeyPairName",
          ],
        },
        "LaunchTemplate": {
          "LaunchTemplateName": "StkCnstrctMyCiHost001InstanceLaunchTemplate",
          "Version": {
            "Fn::GetAtt": [
              "CnstrctStkCnstrctMyCiHost001InstanceLaunchTemplateD3F24170",
              "LatestVersionNumber",
            ],
          },
        },
        "Monitoring": true,
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CnstrctSgF5C70BA4",
              "GroupId",
            ],
          },
        ],
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "my-ci-host-001.test-zoneName",
          },
        ],
        "UserData": {
          "Fn::Base64": {
            "Fn::Join": [
              "",
              [
                "#cloud-config
timezone: America/Los_Angeles
fqdn: my-ci-host-001.test-zoneName
hostname: my-ci-host-001.test-zoneName
mounts:
  - - tmpfs
    - /var/lib/docker
    - tmpfs
    - defaults,noatime,exec,mode=0710,nr_inodes=0,size=4G
    - "0"
    - "0"
apt_sources:
  - source: deb https://cli.github.com/packages stable main
    keyid: 23F3D4EA75716059
    filename: github-cli.list
  - source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
    keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
    filename: docker.list
packages:
  - awscli
  - gh
  - docker-ce
  - docker-ce-cli
  - containerd.io
  - docker-compose-plugin
  - qemu
  - qemu-user-static
  - binfmt-support
  - git
  - gosu
  - mc
  - curl
  - apt-transport-https
  - ca-certificates
  - tzdata
  - atop
  - iotop
  - htop
  - bwm-ng
  - jq
write_files:
  - path: /etc/sysctl.d/enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - path: /etc/default/atop
    content: |
      LOGOPTS="-R"
      LOGINTERVAL=15
      LOGGENERATIONS=4
  - path: /etc/environment
    append: true
    content: |
      TZ="America/Los_Angeles"
  - path: /etc/environment
    append: true
    content: |
      LESS="RS"
  - path: /etc/docker/daemon.json
    permissions: "0644"
    content: |
      {
        "log-driver": "syslog",
        "log-opts": {
          "tag": "docker/{{.Name}}"
        },
        "runtimes": {
          "sysbox-runc": {
            "path": "/usr/bin/sysbox-runc"
          }
        },
        "default-runtime": "sysbox-runc",
        "userns-remap": "sysbox"
      }
  - path: /var/lib/cloud/scripts/per-once/apply-services-configs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      service atop restart || true
      sysctl --system
  - path: /var/lib/cloud/scripts/per-once/increase-docker-shutdown-timeout.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      sed -i -E '/TimeoutStartSec=.*/a TimeoutStopSec=3600' /usr/lib/systemd/system/docker.service
      systemctl daemon-reload
  - path: /var/lib/cloud/scripts/per-once/add-ubuntu-user-to-docker-group-to-access-socket.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -aG docker ubuntu
  - path: /var/lib/cloud/scripts/per-once/install-sysbox-for-docker-in-docker.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl stop docker docker.socket || true
      wget -nv -O /tmp/sysbox-ce.deb "https://downloads.nestybox.com/sysbox/releases/v0.6.4/sysbox-ce_0.6.4-0.linux_$(dpkg --print-architecture).deb"
      dpkg -i /tmp/sysbox-ce.deb
      rm -f /tmp/sysbox-ce.deb
  - path: /var/lib/cloud/scripts/per-once/switch-ssm-user-to-ubuntu-on-login.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo '[ "$0$@" = "sh" ] && ENV= sudo -u ubuntu -i' > /etc/profile.ssm-user
      mkdir -p /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d/
      (
        echo '[Service]'
        echo 'Environment="ENV=/etc/profile.ssm-user"'
      ) > /etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d/sh-env.conf
      systemctl daemon-reload
      systemctl restart snap.amazon-ssm-agent.amazon-ssm-agent.service || true
  - path: /var/lib/cloud/scripts/per-once/rsync-tmpfs-volume-from-old-instance.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      instance_id=$(ec2metadata --instance-id)
      stack_name=$(
        aws ec2 describe-tags \\
        --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=aws:cloudformation:stack-name" \\
        --query "Tags[0].Value" --output text
      )
      logical_id=$(
        aws ec2 describe-tags \\
        --filters "Name=resource-id,Values=$instance_id" "Name=key,Values=aws:cloudformation:logical-id" \\
        --query "Tags[0].Value" --output text
      )
      old_instance_ip_addr=$(
        aws ec2 describe-instances \\
        --filters "Name=tag:Name,Values=my-ci-host-001.test-zoneName" "Name=instance-state-name,Values=running" \\
        --query "Reservations[*].Instances[*].[InstanceId,PrivateIpAddress]" --output text \\
        | grep -v "$instance_id" | awk '{print $2}' | head -n1 || true
      )

      if [[ "$old_instance_ip_addr" != "" ]]; then
        # Load private key from Secrets Manager to ~/.ssh, to access the old host.
        mkdir -p ~/.ssh && chmod 700 ~/.ssh
        aws secretsmanager get-secret-value \\
          --secret-id "ec2-ssh-key/",
                {
                  "Fn::GetAtt": [
                    "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                    "KeyPairName",
                  ],
                },
                "/private" \\
          --query SecretString --output text \\
          > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # Stop Docker service on the current host.
        systemctl stop docker docker.socket || true

        # Stop Docker service on the old (source) host.
        ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null \\
          "ubuntu@$old_instance_ip_addr" "sudo systemctl stop docker docker.socket || true"

        # 1. Surprisingly, it takes almost the same amount of time to rsync-init
        #    (if we would run it without stopping Docker on the old host first)
        #    as to the follow-up rsync-over (after we stopped Docker on the source).
        #    This is probably because of the RAM drive and large Docker volumes. So
        #    we skip rsync-init and just go with one full rsync run (with downtime).
        # 2. Also, compression (even the fastest one) doesn't speed it up; probably
        #    because AWS network is faster than instances CPU still.
        time rsync \\
          -aHXS --one-file-system --numeric-ids --delete $@ \\
          --rsh="ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null" \\
          --rsync-path="sudo rsync" \\
          "ubuntu@$old_instance_ip_addr:/var/lib/docker/" "/var/lib/docker/"

        # We do NOT start Docker service here! Otherwise, it may auto-start some
        # containers, those containers will expect the git directory to exist,
        # although it may not exist yet. So, we start Docker service in
        # run-docker-compose.sh (its 1st run), when we are sure that git is pulled.
      fi

      aws cloudformation signal-resource \\
        --stack-name "$stack_name" --logical-resource-id "$logical_id" \\
        --unique-id "$instance_id" --status SUCCESS
  - path: /etc/rsyslog.d/01-docker-tag-to-serial-console.conf
    permissions: "0644"
    content: |
      if $syslogtag startswith 'docker/' then -/dev/console
      # It will also write to /var/log/syslog as usual.
  - path: /var/lib/cloud/scripts/per-once/allow-rsyslog-write-to-serial-console.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -a -G tty syslog
      systemctl restart rsyslog
  - path: /var/lib/cloud/scripts/per-boot/run-docker-compose-on-boot.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo "*/2 * * * * ubuntu /home/ubuntu/run-docker-compose.sh --no-logs 2>&1 | logger -t docker/run-docker-compose" > /etc/cron.d/run-docker-compose
      exec /home/ubuntu/run-docker-compose.sh
  - path: /home/ubuntu/run-docker-compose.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash

      # Switch to non-privileged user if running as root.
      if [[ $(whoami) != "ubuntu" ]]; then
        exec gosu ubuntu "$BASH_SOURCE" "$@"
      fi

      # Ensure there is only one instance of this script running.
      exec {FD}<$BASH_SOURCE
      flock -n "$FD" || { echo "Already running."; exit 0; }
      set -e -o pipefail && echo ================ && echo "Running $BASH_SOURCE as $(whoami)" && set -o xtrace && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      # Make sure we're using the right timezone; it may be not up
      # to date in the current environment during the very 1st run
      # from run-docker-compose-on-boot.sh.
      source /etc/environment
      export TZ

      # Load private and public keys from Secrets Manager to ~/.ssh.
      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      aws secretsmanager get-secret-value \\
        --secret-id "ec2-ssh-key/",
                {
                  "Fn::GetAtt": [
                    "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                    "KeyPairName",
                  ],
                },
                "/private" \\
        --query SecretString --output text \\
        > ~/.ssh/ci-storage
      chmod 600 ~/.ssh/ci-storage
      ssh-keygen -f ~/.ssh/ci-storage -y > ~/.ssh/ci-storage.pub

      # Load GitHub PAT from Secrets Manager and log in to GitHub.
      aws secretsmanager get-secret-value \\
        --secret-id "ci-storage/gh-token" \\
        --query SecretString --output text \\
        | gh auth login --with-token
      gh auth setup-git

      # Log in to ghcr.io every hour.
      config=~/.docker/config.json
      if [[ ! -f $config ]] || find "$config" -type f -mmin +60 | grep -q .; then
        gh auth token | docker login ghcr.io -u "$(gh api user -q .login)" --password-stdin
      fi

      # Pull the repository.
      mkdir -p ~/git && cd ~/git
      if [[ ! -d .git ]]; then
        git clone -n --depth=1 --filter=tree:0  "https://github.com/dimikot/ci-storage" .
        if [[ "docker" != "." ]]; then
          git sparse-checkout set --no-cone "docker"
        fi
        git checkout
      else
        git pull --rebase
      fi

      # Process some tokens and print rate limits without xtrace.
      set +o xtrace
      GH_TOKEN=$(gh auth token)
      echo "Docker Hub Rate Limits:"
      docker_hub_token=$(curl -s "https://auth.docker.io/token?service=registry.docker.io&scope=repository:ratelimitpreview/test:pull" | jq -r .token || true)
      curl -s --head -H "Authorization: Bearer $docker_hub_token" https://registry-1.docker.io/v2/ratelimitpreview/test/manifests/latest | grep ratelimit || true
      echo "GitHub Core Rate Limits:"
      gh api -i -X HEAD /rate_limit | grep Ratelimit
      set -o xtrace

      # Export env vars for docker compose.
      export GH_TOKEN

      # It it's the very 1st run, start Docker service. We do not start it every run,
      # because otherwise we wouldn't be able to "systemctl stop docker docker.socket"
      # manually or while copying files from the old host.
      file=~/.docker-started-after-first-git-clone
      if [[ ! -f $file ]]; then
        sudo systemctl start docker docker.socket
        touch $file
      fi

      # Run docker compose.
      cd "docker"
      docker pull ghcr.io/dimikot/ci-storage:main || true
      docker pull ghcr.io/dimikot/ci-runner:main || true
      docker compose --profile=ci up --build --remove-orphans -d
      sleep 5
      if [[ "$1" != "--no-logs" ]]; then
        docker compose logs -n 10
      fi
      docker system prune --volumes -f
  - path: /home/ubuntu/.bash_profile
    owner: ubuntu:ubuntu
    permissions: "0644"
    defer: true
    content: |
      #!/bin/bash
      C_CMD="\\033[0;36m"
      C_NO="\\033[0m"
      if [[ -d ~/git/"docker" ]]; then
        cd ~/git/"docker"
        echo -e "$C_CMD\\$ docker compose ps$C_NO"
        docker --log-level=ERROR compose ps --format="table {{.Service}}\\t{{.Status}}\\t{{.Ports}}"
        services=$(docker compose ps --format '{{.Service}}' 2>/dev/null)
        if [[ "$services" != "" && $(echo "$services" | wc -l) -eq 1 ]]; then
          cmd="docker compose exec $services bash -l"
          echo -e "$C_CMD\\$ $cmd$C_NO"
          eval "$cmd"
        fi
      fi
",
              ],
            ],
          },
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "CnstrctStkCnstrctMyCiHost001InstanceInstanceProfile2045E5AE": {
      "Properties": {
        "Roles": [
          {
            "Ref": "CnstrctHostRole5DD9F366",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "CnstrctStkCnstrctMyCiHost001InstanceLaunchTemplateD3F24170": {
      "Properties": {
        "LaunchTemplateData": {
          "MetadataOptions": {
            "HttpTokens": "required",
          },
        },
        "LaunchTemplateName": "StkCnstrctMyCiHost001InstanceLaunchTemplate",
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "EC2KeyNameManagerLambdaBE629145": {
      "DependsOn": [
        "EC2KeyPairManagerRoleB243C519",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "6df647194cd2bd5032d6a0553b301f3350abb6035c13b5ba2a73503a45e7fd80.zip",
        },
        "Description": "Custom CFN resource: Manage EC2 Key Pairs",
        "FunctionName": "Stk-CFN-Resource-Custom-EC2-Key-Pair",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "EC2KeyPairManagerRoleB243C519",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "EC2KeyPairManagerPolicyEBBC1576": {
      "Properties": {
        "Description": "Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeKeyPairs",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:CreateKeyPair",
                "ec2:CreateTags",
                "ec2:ImportKeyPair",
              ],
              "Condition": {
                "StringLike": {
                  "aws:RequestTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ec2:*:*:key-pair/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateTags",
                "ec2:DeleteKeyPair",
                "ec2:DeleteTags",
              ],
              "Condition": {
                "StringLike": {
                  "ec2:ResourceTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ec2:*:*:key-pair/*",
                  ],
                ],
              },
            },
            {
              "Action": "secretsmanager:ListSecrets",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:CreateSecret",
                "secretsmanager:TagResource",
              ],
              "Condition": {
                "StringLike": {
                  "aws:RequestTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:DeleteResourcePolicy",
                "secretsmanager:DeleteSecret",
                "secretsmanager:DescribeSecret",
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:ListSecretVersionIds",
                "secretsmanager:PutResourcePolicy",
                "secretsmanager:PutSecretValue",
                "secretsmanager:RestoreSecret",
                "secretsmanager:UntagResource",
                "secretsmanager:UpdateSecret",
                "secretsmanager:UpdateSecretVersionStage",
              ],
              "Condition": {
                "StringLike": {
                  "secretsmanager:ResourceTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "EC2KeyPairManagerRoleB243C519": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs",
        "ManagedPolicyArns": [
          {
            "Ref": "EC2KeyPairManagerPolicyEBBC1576",
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": {
      "DependsOn": [
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
