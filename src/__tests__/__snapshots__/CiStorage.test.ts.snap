// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`CiStorage 1`] = `
{
  "Description": "A stack to generate unit tests for CiStorage construct",
  "Mappings": "<skipped>",
  "Parameters": {
    "BootstrapVersion": {
      "Default": "/cdk-bootstrap/hnb659fds/version",
      "Description": "Version of the CDK Bootstrap resources in this environment, automatically retrieved from SSM Parameter Store. [cdk:skip]",
      "Type": "AWS::SSM::Parameter::Value<String>",
    },
    "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter": {
      "Default": "/aws/service/canonical/ubuntu/server/24.04/stable/current/arm64/hvm/ebs-gp3/ami-id",
      "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
    },
  },
  "Resources": {
    "AWS679f53fac002430cb0da5b7982bd22872D164C4C": {
      "DependsOn": [
        "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
            "Arn",
          ],
        },
        "Runtime": {
          "Fn::FindInMap": [
            "LatestNodeRuntimeMap",
            {
              "Ref": "AWS::Region",
            },
            "value",
          ],
        },
        "Timeout": 120,
      },
      "Type": "AWS::Lambda::Function",
    },
    "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctHostRole5DD9F366": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2RoleforSSM",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchAgentServerPolicy",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ec2-ssh-key/",
                        {
                          "Fn::GetAtt": [
                            "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                            "KeyPairName",
                          ],
                        },
                        "/private*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "KeyPairPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ci-storage/gh-token*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GhTokenPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeTags",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "ec2:CreateTags",
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/aws:autoscaling:groupName": [
                        "stk-cnstrct-runnercismall",
                        "stk-cnstrct-runnercilarge",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":ec2:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":instance/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "TagsPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeInstances",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "autoscaling:DescribeAutoScalingGroups",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": [
                    "autoscaling:SetDesiredCapacity",
                    "autoscaling:TerminateInstanceInAutoScalingGroup",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":autoscaling:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":autoScalingGroup:*:autoScalingGroupName/stk-cnstrct-*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "ScalerPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:*",
                      ],
                    ],
                  },
                },
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/ec2/Stk-CnstrctLogs",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/ec2/Stk-CnstrctLogs:log-stream:*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "CloudWatchPolicy",
          },
        ],
        "RoleName": "StkCnstrctHostRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctHostRoleDefaultPolicy8426BDC1": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiStartExecution3968560D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctHostRoleDefaultPolicy8426BDC1",
        "Roles": [
          {
            "Ref": "CnstrctHostRole5DD9F366",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstance27F9175A": {
      "DependsOn": [
        "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRoleDefaultPolicy2852B3B3",
        "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRole930D7FC4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "AutoScalingGroupGetNameFromInstance.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRole930D7FC4",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRole930D7FC4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRoleDefaultPolicy2852B3B3": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRoleDefaultPolicy2852B3B3",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstanceServiceRole930D7FC4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersion08E6BA51": {
      "DependsOn": [
        "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRoleDefaultPolicy0B2C2009",
        "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRole2CD44286",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "AutoScalingGroupUpdateLaunchTemplateVersion.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRole2CD44286",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRole2CD44286": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRoleDefaultPolicy0B2C2009": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRoleDefaultPolicy0B2C2009",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersionServiceRole2CD44286",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreEnable8C7FE336": {
      "DependsOn": [
        "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRoleDefaultPolicyE06BF178",
        "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRole985CCAE9",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "FastSnapshotRestoreEnable.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRole985CCAE9",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRole985CCAE9": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRoleDefaultPolicyE06BF178": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRoleDefaultPolicyE06BF178",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiFastSnapshotRestoreEnableServiceRole985CCAE9",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGC871594F1": {
      "DependsOn": [
        "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleDefaultPolicyD7899CD2",
        "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleCC7B2E07",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "FastSnapshotRestoreGC.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleCC7B2E07",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleCC7B2E07": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleDefaultPolicyD7899CD2": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleDefaultPolicyD7899CD2",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiFastSnapshotRestoreGCServiceRoleCC7B2E07",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGetAction81EE8A35": {
      "DependsOn": [
        "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRoleDefaultPolicy741610CF",
        "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRole98E3327A",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "FastSnapshotRestoreGetAction.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRole98E3327A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRole98E3327A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRoleDefaultPolicy741610CF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRoleDefaultPolicy741610CF",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiFastSnapshotRestoreGetActionServiceRole98E3327A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiImageCreateE181B0A7": {
      "DependsOn": [
        "CnstrctInstanceToAmiImageCreateServiceRoleDefaultPolicy4EC495B0",
        "CnstrctInstanceToAmiImageCreateServiceRole018DA59A",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "ImageCreate.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiImageCreateServiceRole018DA59A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiImageCreateServiceRole018DA59A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiImageCreateServiceRoleDefaultPolicy4EC495B0": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiImageCreateServiceRoleDefaultPolicy4EC495B0",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiImageCreateServiceRole018DA59A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiImageGCC91F1072": {
      "DependsOn": [
        "CnstrctInstanceToAmiImageGCServiceRoleDefaultPolicy1D2A6024",
        "CnstrctInstanceToAmiImageGCServiceRoleFCDB1C6D",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "ImageGC.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiImageGCServiceRoleFCDB1C6D",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiImageGCServiceRoleDefaultPolicy1D2A6024": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiImageGCServiceRoleDefaultPolicy1D2A6024",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiImageGCServiceRoleFCDB1C6D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiImageGCServiceRoleFCDB1C6D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiImageGetActionF356B2EA": {
      "DependsOn": [
        "CnstrctInstanceToAmiImageGetActionServiceRoleDefaultPolicy240980FD",
        "CnstrctInstanceToAmiImageGetActionServiceRole3E92E2AF",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "ImageGetAction.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiImageGetActionServiceRole3E92E2AF",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiImageGetActionServiceRole3E92E2AF": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiImageGetActionServiceRoleDefaultPolicy240980FD": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiImageGetActionServiceRoleDefaultPolicy240980FD",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiImageGetActionServiceRole3E92E2AF",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiLaunchTemplateGC1849B9F5": {
      "DependsOn": [
        "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleDefaultPolicy6A1A6014",
        "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleFD4989D4",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "LaunchTemplateGC.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleFD4989D4",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleDefaultPolicy6A1A6014": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleDefaultPolicy6A1A6014",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleFD4989D4",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiLaunchTemplateGCServiceRoleFD4989D4": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstance7067ACEF": {
      "DependsOn": [
        "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRoleDefaultPolicy54AB0253",
        "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRole7CC1BFBB",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "LaunchTemplateGetNameFromInstance.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRole7CC1BFBB",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRole7CC1BFBB": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRoleDefaultPolicy54AB0253": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRoleDefaultPolicy54AB0253",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstanceServiceRole7CC1BFBB",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiLaunchTemplateUpdateImage99ABAA53": {
      "DependsOn": [
        "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRoleDefaultPolicy6FDF89CC",
        "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRole960A1622",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "LaunchTemplateUpdateImage.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRole960A1622",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRole960A1622": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRoleDefaultPolicy6FDF89CC": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRoleDefaultPolicy6FDF89CC",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiLaunchTemplateUpdateImageServiceRole960A1622",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiLogGroup607FDB05": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "LogGroupName": "/aws/vendedlogs/states/stk-cnstrct-instancetoami-Logs",
        "RetentionInDays": 7,
      },
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Delete",
    },
    "CnstrctInstanceToAmiSnapshotCreate197B8B81": {
      "DependsOn": [
        "CnstrctInstanceToAmiSnapshotCreateServiceRoleDefaultPolicy0D384822",
        "CnstrctInstanceToAmiSnapshotCreateServiceRoleC41A6A8A",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "SnapshotCreate.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiSnapshotCreateServiceRoleC41A6A8A",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiSnapshotCreateServiceRoleC41A6A8A": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiSnapshotCreateServiceRoleDefaultPolicy0D384822": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiSnapshotCreateServiceRoleDefaultPolicy0D384822",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiSnapshotCreateServiceRoleC41A6A8A",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiSnapshotGC0E1F9932": {
      "DependsOn": [
        "CnstrctInstanceToAmiSnapshotGCServiceRoleDefaultPolicyAA3AA903",
        "CnstrctInstanceToAmiSnapshotGCServiceRoleC6251312",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "SnapshotGC.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiSnapshotGCServiceRoleC6251312",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiSnapshotGCServiceRoleC6251312": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiSnapshotGCServiceRoleDefaultPolicyAA3AA903": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiSnapshotGCServiceRoleDefaultPolicyAA3AA903",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiSnapshotGCServiceRoleC6251312",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiSnapshotGetAction89B3D7E9": {
      "DependsOn": [
        "CnstrctInstanceToAmiSnapshotGetActionServiceRoleDefaultPolicy33FBE433",
        "CnstrctInstanceToAmiSnapshotGetActionServiceRoleA9262A8D",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Handler": "SnapshotGetAction.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiSnapshotGetActionServiceRoleA9262A8D",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiSnapshotGetActionServiceRoleA9262A8D": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiSnapshotGetActionServiceRoleDefaultPolicy33FBE433": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:UpdateAutoScalingGroup",
                "ec2:CreateLaunchTemplateVersion",
                "ec2:CreateSnapshot",
                "ec2:CreateTags",
                "ec2:DeleteLaunchTemplateVersions",
                "ec2:DeleteSnapshot",
                "ec2:DeregisterImage",
                "ec2:DescribeFastSnapshotRestores",
                "ec2:DescribeImages",
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:DescribeSnapshots",
                "ec2:DisableFastSnapshotRestores",
                "ec2:EnableFastSnapshotRestores",
                "ec2:RegisterImage",
                "ec2:RunInstances",
                "iam:PassRole",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiSnapshotGetActionServiceRoleDefaultPolicy33FBE433",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiSnapshotGetActionServiceRoleA9262A8D",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiStartExecution3968560D": {
      "DependsOn": [
        "CnstrctInstanceToAmiStartExecutionServiceRoleDefaultPolicy7D2D308E",
        "CnstrctInstanceToAmiStartExecutionServiceRole08358685",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Environment": {
          "Variables": {
            "STATE_MACHINE_ARN": {
              "Fn::Join": [
                "",
                [
                  "arn:",
                  {
                    "Ref": "AWS::Partition",
                  },
                  ":states:",
                  {
                    "Ref": "AWS::Region",
                  },
                  ":",
                  {
                    "Ref": "AWS::AccountId",
                  },
                  ":stateMachine:stk-cnstrct-instancetoami",
                ],
              ],
            },
            "USER_DATA_HASHES": "stk-cnstrct-runnercismall=e081e2b97842c80e&stk-cnstrct-runnercilarge=131519a026e94d74",
          },
        },
        "FunctionName": "stk-cnstrct-instancetoami",
        "Handler": "StartExecution.handler",
        "ReservedConcurrentExecutions": 1,
        "Role": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiStartExecutionServiceRole08358685",
            "Arn",
          ],
        },
        "Runtime": "nodejs20.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctInstanceToAmiStartExecutionServiceRole08358685": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiStartExecutionServiceRoleDefaultPolicy7D2D308E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "states:ListExecutions",
                "states:StartExecution",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":stateMachine:stk-cnstrct-instancetoami",
                  ],
                ],
              },
            },
            {
              "Action": [
                "states:DescribeExecution",
                "states:StopExecution",
              ],
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":states:",
                    {
                      "Ref": "AWS::Region",
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId",
                    },
                    ":execution:stk-cnstrct-instancetoami:*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:DescribeInstances",
                "ec2:DescribeLaunchTemplates",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiStartExecutionServiceRoleDefaultPolicy7D2D308E",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiStartExecutionServiceRole08358685",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctInstanceToAmiStateMachine523C3BC9": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CnstrctInstanceToAmiStartExecution3968560D",
        "CnstrctInstanceToAmiStartExecutionServiceRoleDefaultPolicy7D2D308E",
        "CnstrctInstanceToAmiStartExecutionServiceRole08358685",
        "CnstrctInstanceToAmiStateMachineRoleDefaultPolicy5C292EAF",
        "CnstrctInstanceToAmiStateMachineRoleA9BBDE99",
      ],
      "Properties": {
        "DefinitionString": {
          "Fn::Join": [
            "",
            [
              "{"StartAt":"LaunchTemplateGetNameFromInstanceStep","States":{"LaunchTemplateGetNameFromInstanceStep":{"Next":"AutoScalingGroupGetNameFromInstanceStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstance7067ACEF",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"AutoScalingGroupGetNameFromInstanceStep":{"Next":"SnapshotCreateStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstance27F9175A",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"SnapshotCreateStep":{"Next":"SnapshotWaitStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiSnapshotCreate197B8B81",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"SnapshotWaitStep":{"Type":"Wait","Seconds":10,"Next":"SnapshotGetActionStep"},"SnapshotGetActionStep":{"Next":"SnapshotGetActionChoice","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiSnapshotGetAction89B3D7E9",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"SnapshotGetActionChoice":{"Type":"Choice","Choices":[{"Variable":"$.action","StringEquals":"continue","Next":"FastSnapshotRestoreEnableStep"}],"Default":"SnapshotWaitStep"},"FastSnapshotRestoreEnableStep":{"Next":"FastSnapshotRestoreWaitStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiFastSnapshotRestoreEnable8C7FE336",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"FastSnapshotRestoreWaitStep":{"Type":"Wait","Seconds":5,"Next":"FastSnapshotRestoreGetActionStep"},"FastSnapshotRestoreGetActionStep":{"Next":"FastSnapshotRestoreGetActionChoice","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiFastSnapshotRestoreGetAction81EE8A35",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"FastSnapshotRestoreGetActionChoice":{"Type":"Choice","Choices":[{"Variable":"$.action","StringEquals":"continue","Next":"ImageCreateStep"}],"Default":"FastSnapshotRestoreWaitStep"},"ImageCreateStep":{"Next":"ImageWaitStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiImageCreateE181B0A7",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"ImageWaitStep":{"Type":"Wait","Seconds":1,"Next":"ImageGetActionStep"},"ImageGetActionStep":{"Next":"ImageGetActionChoice","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiImageGetActionF356B2EA",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"ImageGetActionChoice":{"Type":"Choice","Choices":[{"Variable":"$.action","StringEquals":"continue","Next":"LaunchTemplateUpdateImageStep"}],"Default":"ImageWaitStep"},"LaunchTemplateUpdateImageStep":{"Next":"AutoScalingGroupUpdateLaunchTemplateVersionStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiLaunchTemplateUpdateImage99ABAA53",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"AutoScalingGroupUpdateLaunchTemplateVersionStep":{"Next":"ImageGCStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersion08E6BA51",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"ImageGCStep":{"Next":"SnapshotGCStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiImageGCC91F1072",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"SnapshotGCStep":{"Next":"FastSnapshotRestoreGCStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiSnapshotGC0E1F9932",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"FastSnapshotRestoreGCStep":{"Next":"LaunchTemplateGCStep","Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiFastSnapshotRestoreGC871594F1",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}},"LaunchTemplateGCStep":{"End":true,"Retry":[{"ErrorEquals":["Lambda.ClientExecutionTimeoutException","Lambda.ServiceException","Lambda.AWSLambdaException","Lambda.SdkClientException"],"IntervalSeconds":2,"MaxAttempts":6,"BackoffRate":2},{"ErrorEquals":["States.ALL"]}],"Type":"Task","OutputPath":"$.Payload","Resource":"arn:",
              {
                "Ref": "AWS::Partition",
              },
              ":states:::lambda:invoke","Parameters":{"FunctionName":"",
              {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiLaunchTemplateGC1849B9F5",
                  "Arn",
                ],
              },
              "","Payload.$":"$"}}},"TimeoutSeconds":1800}",
            ],
          ],
        },
        "LoggingConfiguration": {
          "Destinations": [
            {
              "CloudWatchLogsLogGroup": {
                "LogGroupArn": {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiLogGroup607FDB05",
                    "Arn",
                  ],
                },
              },
            },
          ],
          "IncludeExecutionData": true,
          "Level": "ALL",
        },
        "RoleArn": {
          "Fn::GetAtt": [
            "CnstrctInstanceToAmiStateMachineRoleA9BBDE99",
            "Arn",
          ],
        },
        "StateMachineName": "stk-cnstrct-instancetoami",
        "TracingConfiguration": {
          "Enabled": true,
        },
      },
      "Type": "AWS::StepFunctions::StateMachine",
      "UpdateReplacePolicy": "Delete",
    },
    "CnstrctInstanceToAmiStateMachineRoleA9BBDE99": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "states.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "lambda:InvokeFunction",
                  "Effect": "Allow",
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstance27F9175A",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersion08E6BA51",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiFastSnapshotRestoreEnable8C7FE336",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiFastSnapshotRestoreGC871594F1",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiFastSnapshotRestoreGetAction81EE8A35",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiImageCreateE181B0A7",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiImageGCC91F1072",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiImageGetActionF356B2EA",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiLaunchTemplateGC1849B9F5",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstance7067ACEF",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiLaunchTemplateUpdateImage99ABAA53",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiSnapshotCreate197B8B81",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiSnapshotGC0E1F9932",
                        "Arn",
                      ],
                    },
                    {
                      "Fn::GetAtt": [
                        "CnstrctInstanceToAmiSnapshotGetAction89B3D7E9",
                        "Arn",
                      ],
                    },
                  ],
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LambdaPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:CreateLogGroup",
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:",
                        {
                          "Ref": "CnstrctInstanceToAmiLogGroup607FDB05",
                        },
                        "*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "LogPolicy",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctInstanceToAmiStateMachineRoleDefaultPolicy5C292EAF": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstance7067ACEF",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiLaunchTemplateGetNameFromInstance7067ACEF",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstance27F9175A",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiAutoScalingGroupGetNameFromInstance27F9175A",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiSnapshotCreate197B8B81",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiSnapshotCreate197B8B81",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiSnapshotGetAction89B3D7E9",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiSnapshotGetAction89B3D7E9",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiFastSnapshotRestoreEnable8C7FE336",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiFastSnapshotRestoreEnable8C7FE336",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiFastSnapshotRestoreGetAction81EE8A35",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiFastSnapshotRestoreGetAction81EE8A35",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiImageCreateE181B0A7",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiImageCreateE181B0A7",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiImageGetActionF356B2EA",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiImageGetActionF356B2EA",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiLaunchTemplateUpdateImage99ABAA53",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiLaunchTemplateUpdateImage99ABAA53",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersion08E6BA51",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiAutoScalingGroupUpdateLaunchTemplateVersion08E6BA51",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiImageGCC91F1072",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiImageGCC91F1072",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiSnapshotGC0E1F9932",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiSnapshotGC0E1F9932",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiFastSnapshotRestoreGC871594F1",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiFastSnapshotRestoreGC871594F1",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "CnstrctInstanceToAmiLaunchTemplateGC1849B9F5",
                    "Arn",
                  ],
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      {
                        "Fn::GetAtt": [
                          "CnstrctInstanceToAmiLaunchTemplateGC1849B9F5",
                          "Arn",
                        ],
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            {
              "Action": [
                "logs:CreateLogDelivery",
                "logs:GetLogDelivery",
                "logs:UpdateLogDelivery",
                "logs:DeleteLogDelivery",
                "logs:ListLogDeliveries",
                "logs:PutResourcePolicy",
                "logs:DescribeResourcePolicies",
                "logs:DescribeLogGroups",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "xray:PutTraceSegments",
                "xray:PutTelemetryRecords",
                "xray:GetSamplingRules",
                "xray:GetSamplingTargets",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctInstanceToAmiStateMachineRoleDefaultPolicy5C292EAF",
        "Roles": [
          {
            "Ref": "CnstrctInstanceToAmiStateMachineRoleA9BBDE99",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctLink3BE2E5AA": {
      "Properties": {
        "Name": "stk-cnstrct-link",
        "SecurityGroupIds": [
          {
            "Fn::GetAtt": [
              "CnstrctSgF5C70BA4",
              "GroupId",
            ],
          },
        ],
        "SubnetIds": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
      },
      "Type": "AWS::ApiGatewayV2::VpcLink",
    },
    "CnstrctMyCiHost001A9DE30324": {
      "Properties": {
        "HostedZoneId": "test-hostedZoneId",
        "Name": "my-ci-host-001.test-zoneName.",
        "ResourceRecords": [
          {
            "Fn::GetAtt": [
              "CnstrctMyCiHost001Instance0F6CFAF15e4f1523bcdfee21",
              "PrivateIp",
            ],
          },
        ],
        "TTL": "60",
        "Type": "A",
      },
      "Type": "AWS::Route53::RecordSet",
    },
    "CnstrctMyCiHost001ApiCCC990DF": {
      "Properties": {
        "Name": "stk-cnstrct-mycihost001",
        "ProtocolType": "HTTP",
      },
      "Type": "AWS::ApiGatewayV2::Api",
    },
    "CnstrctMyCiHost001ApiDefaultStage4EC87F30": {
      "Properties": {
        "ApiId": {
          "Ref": "CnstrctMyCiHost001ApiCCC990DF",
        },
        "AutoDeploy": true,
        "StageName": "$default",
      },
      "Type": "AWS::ApiGatewayV2::Stage",
    },
    "CnstrctMyCiHost001ApiPOSTproxy7FABAABA": {
      "Properties": {
        "ApiId": {
          "Ref": "CnstrctMyCiHost001ApiCCC990DF",
        },
        "AuthorizationType": "NONE",
        "RouteKey": "POST /{proxy+}",
        "Target": {
          "Fn::Join": [
            "",
            [
              "integrations/",
              {
                "Ref": "CnstrctMyCiHost001ApiPOSTproxyIntegration881CB7BF",
              },
            ],
          ],
        },
      },
      "Type": "AWS::ApiGatewayV2::Route",
    },
    "CnstrctMyCiHost001ApiPOSTproxyIntegration881CB7BF": {
      "Properties": {
        "ApiId": {
          "Ref": "CnstrctMyCiHost001ApiCCC990DF",
        },
        "ConnectionId": {
          "Ref": "CnstrctLink3BE2E5AA",
        },
        "ConnectionType": "VPC_LINK",
        "IntegrationMethod": "ANY",
        "IntegrationType": "HTTP_PROXY",
        "IntegrationUri": {
          "Ref": "CnstrctMyCiHost001NlbListener85589A96",
        },
        "PayloadFormatVersion": "1.0",
      },
      "Type": "AWS::ApiGatewayV2::Integration",
    },
    "CnstrctMyCiHost001Instance0F6CFAF15e4f1523bcdfee21": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "InstanceType": "t3.large",
        "LaunchTemplate": {
          "LaunchTemplateId": {
            "Ref": "CnstrctMyCiHost001Lt509F8571",
          },
          "Version": {
            "Fn::GetAtt": [
              "CnstrctMyCiHost001Lt509F8571",
              "LatestVersionNumber",
            ],
          },
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "my-ci-host-001.test-zoneName",
          },
        ],
      },
      "Type": "AWS::EC2::Instance",
    },
    "CnstrctMyCiHost001Lt509F8571": {
      "DependsOn": [
        "CnstrctHostRoleDefaultPolicy8426BDC1",
        "CnstrctHostRole5DD9F366",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 20,
                "VolumeType": "gp3",
              },
            },
          ],
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "CnstrctMyCiHost001LtProfileF9C5FA56",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Ref": "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter",
          },
          "KeyName": {
            "Fn::GetAtt": [
              "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
              "KeyPairName",
            ],
          },
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 2,
            "HttpTokens": "required",
          },
          "Monitoring": {
            "Enabled": true,
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "CnstrctSgF5C70BA4",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/MyCiHost001Lt",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/MyCiHost001Lt",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#cloud-config
timezone: America/Los_Angeles
fqdn: my-ci-host-001.test-zoneName
hostname: my-ci-host-001.test-zoneName
bootcmd:
  - |
    #!/bin/sh
    cat <<'EOT' > /etc/profile.ssm-user
    #!/bin/sh
    [ "$0$@" = "sh" ] && ENV= sudo -u "ubuntu" -i
    EOT
    dir=/etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d
    mkdir -p $dir
    cat <<'EOT' > $dir/override.conf
    [Service]
    Environment="ENV=/etc/profile.ssm-user"
    EOT
  - |
    #!/bin/sh
    set -e -x
    mkdir -p /var/lib/docker
    mount -t tmpfs -o 'defaults,noatime,exec,nr_inodes=0,mode=710,size=4G' tmpfs /var/lib/docker
  - mkdir -p /var/log/atop
apt:
  sources:
    github-cli.list:
      source: deb https://cli.github.com/packages stable main
      append: false
      keyid: 23F3D4EA75716059
    docker.list:
      source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
      append: false
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - docker-ce=5:27.3.1-1~ubuntu.24.04~noble
  - docker-ce-cli=5:27.3.1-1~ubuntu.24.04~noble
  - containerd.io=1.7.23-1
  - docker-compose-plugin=2.29.7-1~ubuntu.24.04~noble
  - docker-buildx-plugin=0.17.1-1~ubuntu.24.04~noble
  - qemu-system=1:8.2.2+ds-0ubuntu1.4
  - qemu-user-static=1:8.2.2+ds-0ubuntu1.4
  - gh
  - binfmt-support
  - git
  - gosu
  - mc
  - curl
  - apt-transport-https
  - ca-certificates
  - tzdata
  - atop
  - iotop
  - htop
  - bwm-ng
  - jq
  - expect
snap:
  commands:
    "0": snap install aws-cli --classic
write_files:
  - path: /etc/sysctl.d/enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - path: /etc/default/atop
    content: |
      LOGOPTS="-R"
      LOGINTERVAL=15
      LOGGENERATIONS=4
  - path: /etc/docker/daemon.json
    permissions: "0644"
    content: |
      {
        "log-driver": "syslog",
        "log-opts": {
          "tag": "docker/{{.Name}}"
        },
        "runtimes": {
          "sysbox-runc": {
            "path": "/usr/bin/sysbox-runc"
          }
        },
        "default-runtime": "sysbox-runc",
        "userns-remap": "sysbox",
        "max-concurrent-downloads": 10,
        "max-concurrent-uploads": 100
      }
  - path: /etc/systemd/system/docker.service.d/override.conf
    permissions: "0644"
    content: |
      [Service]
      TimeoutStopSec=3600
      ExecStartPost=/home/ubuntu/run-docker-compose.sh --called-from-systemd
  - path: /etc/cron.d/git-pull-and-rerun-docker-compose-periodically
    permissions: "0644"
    content: |
      */1 * * * * ubuntu /home/ubuntu/run-docker-compose.sh --no-print-compose-logs 2>&1 | logger -t docker/run-docker-compose
  - path: /etc/rsyslog.d/01-docker-tag-to-serial-console.conf
    permissions: "0644"
    content: |
      if $syslogtag startswith 'docker/' then -/dev/console
      # It will also write to /var/log/syslog as usual.
  - path: /var/lib/cloud/scripts/per-once/00-append-etc-environment.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo "TZ=America/Los_Angeles" >> /etc/environment
      echo "LESS=RS" >> /etc/environment
  - path: /var/lib/cloud/scripts/per-once/make-apt-get-install-not-run-after-restoring-from-snapshot-to-speedup-boot.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      sed -i -E 's/(- (package-update-upgrade-install|apt-configure|apt-pipelining))/# \\1/g' /etc/cloud/cloud.cfg
  - path: /var/lib/cloud/scripts/per-once/apply-services-configs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl daemon-reload
      service atop restart || true
      sysctl --system
  - path: /var/lib/cloud/scripts/per-once/add-ubuntu-user-to-docker-group-to-access-socket.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -aG docker ubuntu
  - path: /var/lib/cloud/scripts/per-once/install-sysbox-for-docker-in-docker.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl stop docker docker.socket || true
      for svc in sysbox-fs sysbox-mgr; do
        dir="/etc/systemd/system/$svc.service.d"
        mkdir -p "$dir"
        {
          echo "[Service]"
          echo "Restart=always"
          echo "RestartSec=5"
          if [[ "$svc" == "sysbox-fs" ]]; then
            echo "ExecStartPost=/bin/systemctl start sysbox-mgr.service"
          fi
        } > "$dir/override.conf"
      done
      version="0.6.6"
      wget -nv -O /tmp/sysbox-ce.deb "https://github.com/nestybox/sysbox/releases/download/v$version/sysbox-ce_$version-0.linux_$(dpkg --print-architecture).deb"
      dpkg -i /tmp/sysbox-ce.deb
      rm -f /tmp/sysbox-ce.deb
  - path: /var/lib/cloud/scripts/per-once/allow-rsyslog-write-to-serial-console.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -a -G tty syslog
      systemctl restart rsyslog
  - path: /var/lib/cloud/scripts/per-once/install-cloudwatch-agent.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      wget -nv -O /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/$(dpkg --print-architecture)/latest/amazon-cloudwatch-agent.deb
      dpkg -i /tmp/amazon-cloudwatch-agent.deb
      systemctl enable amazon-cloudwatch-agent
  - path: /var/lib/cloud/scripts/per-instance/configure-cloudwatch.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json <<EOF
      {
        "agent": {
          "run_as_user": "root",
          "interval": "5s",
          "logfile": "/var/log/amazon-cloudwatch-agent"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/cloud-init.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/cloud-init-output.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init-output.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/syslog",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                }
              ]
            }
          }
        }
      }
      EOF
      /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\
        -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
      systemctl restart amazon-cloudwatch-agent
  - path: /home/ubuntu/docker-pull-if-changed-rate-limit-friendly.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash
      set -e -o pipefail
      repo="$1"
      name="$2"
      tag="$3"

      if [[ "$repo" == "" || "$name" == "" || "$tag" == "" ]]; then
        echo "Usage: $0 repo name tag"
        exit 1
      fi

      bearer=$(jq -r ".auths[\\"$repo\\"].auth" ~/.docker/config.json || true)
      if [[ "$bearer" == "" ]]; then
        echo "There is no auth token for $repo in ~/.docker/config.json; did you run \\"docker login\\"?"
        exit 2
      fi

      file=~/.docker/$(echo "$repo-$name-$tag" | sed -E 's/[^-_a-zA-Z0-9]/_/g').digest
      old_digest=$(cat "$file" 2>/dev/null || true)
      cur_digest=$(
        curl -sS --fail --head \\
          -H "Authorization: Bearer $bearer" \\
          -H "Accept: application/vnd.oci.image.index.v1+json" \\
          https://$repo/v2/$name/manifests/$tag \\
          | grep -i 'Docker-Content-Digest' | awk '{print $2}' | sed -E 's/\\s+//'
      )

      if [[ "$old_digest" != "$cur_digest" ]]; then
        if docker pull $repo/$name:$tag; then
          echo "$cur_digest" > $file
        else
          code="$?"
          echo "Failed to run \\"docker pull $repo/$name:$tag\\""
          exit "$code"
        fi
      else
        echo "Not pulling $repo/$name:$tag - no changes in manifest since previous pull (digest: $cur_digest)"
      fi
  - path: /home/ubuntu/run-docker-compose.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash

      if [[ $(whoami) != "ubuntu" ]]; then
        exec gosu ubuntu "$BASH_SOURCE" "$@"
      fi

      exec {FD}<$BASH_SOURCE
      flock -n "$FD" || { echo "Already running."; exit 0; }
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      source /etc/environment
      export TZ

      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      aws secretsmanager get-secret-value \\
        --secret-id "ec2-ssh-key/",
                  {
                    "Fn::GetAtt": [
                      "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                      "KeyPairName",
                    ],
                  },
                  "/private" \\
        --query SecretString --output text \\
        | cat > ~/.ssh/ci-storage
      chmod 600 ~/.ssh/ci-storage
      ssh-keygen -f ~/.ssh/ci-storage -y > ~/.ssh/ci-storage.pub

      aws secretsmanager get-secret-value \\
        --secret-id "ci-storage/gh-token" \\
        --query SecretString --output text \\
        | gh auth login --with-token
      gh auth setup-git

      config=~/.docker/config.json
      if [[ ! -f $config ]] || find "$config" -type f -mmin +60 | grep -q .; then
        gh auth token | docker login ghcr.io -u "$(gh api user -q .login)" --password-stdin
      fi

      mkdir -p ~/git && cd ~/git
      if [[ -d .git ]] && ! git fsck; then
        rm -rf ~/git/* ~/git/.*
      fi
      if [[ ! -d .git ]]; then
        git clone -n --depth=1 --filter=tree:0  "https://github.com/dimikot/ci-storage" .
        if [[ "docker" != "." ]]; then
          git sparse-checkout set --no-cone "docker"
        fi
        git checkout
      else
        git pull --rebase
      fi

      { set +x; } &> /dev/null
      export GH_TOKEN=$(gh auth token)
      { set -x; } &> /dev/null

      export BTIME=$(cat /proc/stat | grep btime | awk '{print $2}')
      export DOMAIN="",
                  {
                    "Fn::GetAtt": [
                      "CnstrctMyCiHost001ApiCCC990DF",
                      "ApiEndpoint",
                    ],
                  },
                  ""
      export ASGS="clickup/ci-storage-cdk:ci-small:stk-cnstrct-runnercismall clickup/ci-storage-cdk:ci-large:stk-cnstrct-runnercilarge"

      if [[ "$*" != *--called-from-systemd* ]]; then
        sudo systemctl daemon-reload
        sudo systemctl start docker docker.socket
      fi

      cd "docker"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-storage" "main"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-storage" "latest"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-scaler" "main"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-scaler" "latest"
      docker compose --profile=ci up --build --remove-orphans -d

      if [[ "$*" != *--no-print-compose-logs* ]]; then
        sleep 5
        docker compose logs -n 10
      fi

      docker system prune --volumes -f
  - path: /home/ubuntu/.bash_profile
    owner: ubuntu:ubuntu
    permissions: "0644"
    defer: true
    content: |
      #!/bin/bash
      C_CMD="\\033[0;36m"
      C_NO="\\033[0m"
      if [[ -d ~/git/"docker" ]]; then
        cd ~/git/"docker"
        echo "Hint: want to know, how did this instance boot and how did"
        echo "the containers initialize? Run on the instance:"
        echo
        echo '$ less /var/log/cloud-init-output.log'
        echo '$ less /var/log/cloud-init.log'
        echo '$ less /var/log/syslog'
        echo
        echo -e "$C_CMD\\$ docker compose ps$C_NO"
        COLUMNS=500 docker --log-level=ERROR compose ps --format="table {{.Service}}\\t{{.Status}}\\t{{.Ports}}"
        echo
        services=$(docker compose ps --format '{{.Service}}' 2>/dev/null)
        if [[ "$services" != "" && $(echo "$services" | wc -l) -eq 1 ]]; then
          echo "Hint: only one service is running on this instance, $services."
          echo
          echo "For your convenience, we are automatically logging you in"
          echo "its container. Feel free to use any regular Linux commands"
          echo "(ls, pwd, mc etc.) or any dev tools."
          echo
          echo "You can alway exit back to the instance by pressing ^D."
          echo
          cmd="docker compose exec $services bash -l"
          echo -e "$C_CMD\\$ $cmd$C_NO"
          eval "$cmd"
        fi
      fi
",
                ],
              ],
            },
          },
        },
        "LaunchTemplateName": "stk-cnstrct-mycihost001",
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Stk/Cnstrct/MyCiHost001Lt",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "CnstrctMyCiHost001LtProfileF9C5FA56": {
      "Properties": {
        "Roles": [
          {
            "Ref": "CnstrctHostRole5DD9F366",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "CnstrctMyCiHost001Nlb3D4B3C4E": {
      "Properties": {
        "LoadBalancerAttributes": [
          {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Name": "stk-cnstrct-mycihost001",
        "Scheme": "internal",
        "SecurityGroups": [
          {
            "Fn::GetAtt": [
              "CnstrctSgF5C70BA4",
              "GroupId",
            ],
          },
        ],
        "Subnets": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
          {
            "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
          },
        ],
        "Type": "network",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "CnstrctMyCiHost001NlbListener85589A96": {
      "Properties": {
        "DefaultActions": [
          {
            "TargetGroupArn": {
              "Ref": "CnstrctMyCiHost001TgA01EA825",
            },
            "Type": "forward",
          },
        ],
        "LoadBalancerArn": {
          "Ref": "CnstrctMyCiHost001Nlb3D4B3C4E",
        },
        "Port": 28088,
        "Protocol": "TCP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "CnstrctMyCiHost001TgA01EA825": {
      "Properties": {
        "HealthCheckIntervalSeconds": 5,
        "HealthCheckTimeoutSeconds": 2,
        "HealthyThresholdCount": 2,
        "Name": "stk-cnstrct-mycihost001",
        "Port": 28088,
        "Protocol": "TCP",
        "TargetType": "instance",
        "Targets": [
          {
            "Id": {
              "Ref": "CnstrctMyCiHost001Instance0F6CFAF15e4f1523bcdfee21",
            },
          },
        ],
        "UnhealthyThresholdCount": 10,
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "CnstrctRunnerCiLargeAsgASGA90353E3": {
      "Properties": {
        "AutoScalingGroupName": "stk-cnstrct-runnercilarge",
        "CapacityRebalance": true,
        "Cooldown": "30",
        "DefaultInstanceWarmup": 60,
        "MaxInstanceLifetime": 86400,
        "MaxSize": "20",
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
          },
        ],
        "MinSize": "5",
        "MixedInstancesPolicy": {
          "InstancesDistribution": {
            "OnDemandAllocationStrategy": "lowest-price",
            "OnDemandPercentageAboveBaseCapacity": 10,
            "SpotAllocationStrategy": "price-capacity-optimized",
          },
          "LaunchTemplate": {
            "LaunchTemplateSpecification": {
              "LaunchTemplateId": {
                "Ref": "CnstrctRunnerCiLargeLt8A1A8B86",
              },
              "Version": {
                "Fn::GetAtt": [
                  "CnstrctRunnerCiLargeLt8A1A8B86",
                  "LatestVersionNumber",
                ],
              },
            },
            "Overrides": [
              {
                "InstanceRequirements": {
                  "MemoryMiB": {
                    "Max": 16384,
                    "Min": 8192,
                  },
                  "VCpuCount": {
                    "Max": 8,
                    "Min": 4,
                  },
                },
              },
            ],
          },
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "my-ci-runner-ci-large",
          },
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 20,
          "MinInstancesInService": 0,
          "PauseTime": "PT0S",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
            "InstanceRefresh",
          ],
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "CnstrctRunnerCiLargeAsgScheduledActionCaWorkDayEnds7274DFDF": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctRunnerCiLargeAsgASGA90353E3",
        },
        "MinSize": 5,
        "Recurrence": "0 18 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctRunnerCiLargeAsgScheduledActionCaWorkDayStartsAE0D0F6C": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctRunnerCiLargeAsgASGA90353E3",
        },
        "MinSize": 10,
        "Recurrence": "0 8 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctRunnerCiLargeLt8A1A8B86": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 40,
                "VolumeType": "gp3",
              },
            },
            {
              "DeviceName": "/dev/sdb",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 13,
                "VolumeType": "gp3",
              },
            },
          ],
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "CnstrctRunnerCiLargeLtProfile04AD45AD",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  """,
                  {
                    "Fn::GetAtt": [
                      "CnstrctRunnerCiLargeLtImageCustomResourceDda6e2ce9D95A10B",
                      "Payload",
                    ],
                  },
                ],
              },
            ],
          },
          "KeyName": {
            "Fn::GetAtt": [
              "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
              "KeyPairName",
            ],
          },
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 2,
            "HttpTokens": "required",
          },
          "Monitoring": {
            "Enabled": true,
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "CnstrctSgF5C70BA4",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/RunnerCiLargeLt",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/RunnerCiLargeLt",
                },
              ],
            },
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "InstanceToAmi:UserDataHash",
                  "Value": "131519a026e94d74",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "InstanceToAmi:UserDataHash",
                  "Value": "131519a026e94d74",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#cloud-config
timezone: America/Los_Angeles
bootcmd:
  - |
    #!/bin/sh
    cat <<'EOT' > /etc/profile.ssm-user
    #!/bin/sh
    [ "$0$@" = "sh" ] && ENV= sudo -u "ubuntu" -i
    EOT
    dir=/etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d
    mkdir -p $dir
    cat <<'EOT' > $dir/override.conf
    [Service]
    Environment="ENV=/etc/profile.ssm-user"
    EOT
  - |
    #!/bin/sh
    set -e -x
    mkdir -p /var/log
    empty_device=""
    if ! blkid -L ephemeral; then
      for path in $(find /dev/disk/by-id -name "*Amazon_Elastic_Block_Store*" -a ! -name "*-part*"); do
        find /dev/disk/by-id -wholename "$path-part*" | grep . || empty_device="$path"
      done
      if [ "$empty_device" = "" ]; then
        echo "Cannot find a disk without partitions. Devices:"
        find /dev/disk/by-id
        exit 1
      fi
      mkfs.ext4 -L ephemeral -F "$empty_device"
    fi
    mount -o 'defaults,noatime,exec' -L ephemeral /var/log
    chown 0:syslog /var/log
    chmod 775 /var/log
    mount --bind -o ro / /mnt
    (cd /mnt; if [ "$empty_device" != "" ]; then cp -af "./var/log/." "/var/log"; fi)
    umount /mnt
  - mkdir -p /var/log/atop
  - |
    #!/bin/sh
    set -e -x
    fallocate -l 8G /var/log/swapfile
    chmod 0600 /var/log/swapfile
    mkswap /var/log/swapfile
    swapon /var/log/swapfile
apt:
  sources:
    github-cli.list:
      source: deb https://cli.github.com/packages stable main
      append: false
      keyid: 23F3D4EA75716059
    docker.list:
      source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
      append: false
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - docker-ce=5:27.3.1-1~ubuntu.24.04~noble
  - docker-ce-cli=5:27.3.1-1~ubuntu.24.04~noble
  - containerd.io=1.7.23-1
  - docker-compose-plugin=2.29.7-1~ubuntu.24.04~noble
  - docker-buildx-plugin=0.17.1-1~ubuntu.24.04~noble
  - qemu-system=1:8.2.2+ds-0ubuntu1.4
  - qemu-user-static=1:8.2.2+ds-0ubuntu1.4
  - gh
  - binfmt-support
  - git
  - gosu
  - mc
  - curl
  - apt-transport-https
  - ca-certificates
  - tzdata
  - atop
  - iotop
  - htop
  - bwm-ng
  - jq
  - expect
snap:
  commands:
    "0": snap install aws-cli --classic
write_files:
  - path: /etc/sysctl.d/enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - path: /etc/default/atop
    content: |
      LOGOPTS="-R"
      LOGINTERVAL=15
      LOGGENERATIONS=4
  - path: /etc/docker/daemon.json
    permissions: "0644"
    content: |
      {
        "log-driver": "syslog",
        "log-opts": {
          "tag": "docker/{{.Name}}"
        },
        "runtimes": {
          "sysbox-runc": {
            "path": "/usr/bin/sysbox-runc"
          }
        },
        "default-runtime": "sysbox-runc",
        "userns-remap": "sysbox",
        "max-concurrent-downloads": 10,
        "max-concurrent-uploads": 100
      }
  - path: /etc/systemd/system/docker.service.d/override.conf
    permissions: "0644"
    content: |
      [Service]
      TimeoutStopSec=3600
      ExecStartPost=/home/ubuntu/run-docker-compose.sh --called-from-systemd
  - path: /etc/cron.d/git-pull-and-rerun-docker-compose-periodically
    permissions: "0644"
    content: |
      */1 * * * * ubuntu /home/ubuntu/run-docker-compose.sh --no-print-compose-logs 2>&1 | logger -t docker/run-docker-compose
  - path: /etc/rsyslog.d/01-docker-tag-to-serial-console.conf
    permissions: "0644"
    content: |
      if $syslogtag startswith 'docker/' then -/dev/console
      # It will also write to /var/log/syslog as usual.
  - path: /var/lib/cloud/scripts/per-once/00-append-etc-environment.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo "TZ=America/Los_Angeles" >> /etc/environment
      echo "LESS=RS" >> /etc/environment
  - path: /var/lib/cloud/scripts/per-once/make-apt-get-install-not-run-after-restoring-from-snapshot-to-speedup-boot.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      sed -i -E 's/(- (package-update-upgrade-install|apt-configure|apt-pipelining))/# \\1/g' /etc/cloud/cloud.cfg
  - path: /var/lib/cloud/scripts/per-once/apply-services-configs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl daemon-reload
      service atop restart || true
      sysctl --system
  - path: /var/lib/cloud/scripts/per-once/add-ubuntu-user-to-docker-group-to-access-socket.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -aG docker ubuntu
  - path: /var/lib/cloud/scripts/per-once/install-sysbox-for-docker-in-docker.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl stop docker docker.socket || true
      for svc in sysbox-fs sysbox-mgr; do
        dir="/etc/systemd/system/$svc.service.d"
        mkdir -p "$dir"
        {
          echo "[Service]"
          echo "Restart=always"
          echo "RestartSec=5"
          if [[ "$svc" == "sysbox-fs" ]]; then
            echo "ExecStartPost=/bin/systemctl start sysbox-mgr.service"
          fi
        } > "$dir/override.conf"
      done
      version="0.6.6"
      wget -nv -O /tmp/sysbox-ce.deb "https://github.com/nestybox/sysbox/releases/download/v$version/sysbox-ce_$version-0.linux_$(dpkg --print-architecture).deb"
      dpkg -i /tmp/sysbox-ce.deb
      rm -f /tmp/sysbox-ce.deb
  - path: /var/lib/cloud/scripts/per-once/allow-rsyslog-write-to-serial-console.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -a -G tty syslog
      systemctl restart rsyslog
  - path: /var/lib/cloud/scripts/per-once/install-cloudwatch-agent.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      wget -nv -O /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/$(dpkg --print-architecture)/latest/amazon-cloudwatch-agent.deb
      dpkg -i /tmp/amazon-cloudwatch-agent.deb
      systemctl enable amazon-cloudwatch-agent
  - path: /var/lib/cloud/scripts/per-instance/configure-cloudwatch.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json <<EOF
      {
        "agent": {
          "run_as_user": "root",
          "interval": "5s",
          "logfile": "/var/log/amazon-cloudwatch-agent"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/cloud-init.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/cloud-init-output.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init-output.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/syslog",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                }
              ]
            }
          }
        }
      }
      EOF
      /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\
        -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
      systemctl restart amazon-cloudwatch-agent
  - path: /home/ubuntu/docker-pull-if-changed-rate-limit-friendly.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash
      set -e -o pipefail
      repo="$1"
      name="$2"
      tag="$3"

      if [[ "$repo" == "" || "$name" == "" || "$tag" == "" ]]; then
        echo "Usage: $0 repo name tag"
        exit 1
      fi

      bearer=$(jq -r ".auths[\\"$repo\\"].auth" ~/.docker/config.json || true)
      if [[ "$bearer" == "" ]]; then
        echo "There is no auth token for $repo in ~/.docker/config.json; did you run \\"docker login\\"?"
        exit 2
      fi

      file=~/.docker/$(echo "$repo-$name-$tag" | sed -E 's/[^-_a-zA-Z0-9]/_/g').digest
      old_digest=$(cat "$file" 2>/dev/null || true)
      cur_digest=$(
        curl -sS --fail --head \\
          -H "Authorization: Bearer $bearer" \\
          -H "Accept: application/vnd.oci.image.index.v1+json" \\
          https://$repo/v2/$name/manifests/$tag \\
          | grep -i 'Docker-Content-Digest' | awk '{print $2}' | sed -E 's/\\s+//'
      )

      if [[ "$old_digest" != "$cur_digest" ]]; then
        if docker pull $repo/$name:$tag; then
          echo "$cur_digest" > $file
        else
          code="$?"
          echo "Failed to run \\"docker pull $repo/$name:$tag\\""
          exit "$code"
        fi
      else
        echo "Not pulling $repo/$name:$tag - no changes in manifest since previous pull (digest: $cur_digest)"
      fi
  - path: /home/ubuntu/run-docker-compose.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash

      if [[ $(whoami) != "ubuntu" ]]; then
        exec gosu ubuntu "$BASH_SOURCE" "$@"
      fi

      exec {FD}<$BASH_SOURCE
      flock -n "$FD" || { echo "Already running."; exit 0; }
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      source /etc/environment
      export TZ

      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      aws secretsmanager get-secret-value \\
        --secret-id "ec2-ssh-key/",
                  {
                    "Fn::GetAtt": [
                      "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                      "KeyPairName",
                    ],
                  },
                  "/private" \\
        --query SecretString --output text \\
        | cat > ~/.ssh/ci-storage
      chmod 600 ~/.ssh/ci-storage
      ssh-keygen -f ~/.ssh/ci-storage -y > ~/.ssh/ci-storage.pub

      aws secretsmanager get-secret-value \\
        --secret-id "ci-storage/gh-token" \\
        --query SecretString --output text \\
        | gh auth login --with-token
      gh auth setup-git

      config=~/.docker/config.json
      if [[ ! -f $config ]] || find "$config" -type f -mmin +60 | grep -q .; then
        gh auth token | docker login ghcr.io -u "$(gh api user -q .login)" --password-stdin
      fi

      mkdir -p ~/git && cd ~/git
      if [[ -d .git ]] && ! git fsck; then
        rm -rf ~/git/* ~/git/.*
      fi
      if [[ ! -d .git ]]; then
        git clone -n --depth=1 --filter=tree:0  "https://github.com/dimikot/ci-storage" .
        if [[ "docker" != "." ]]; then
          git sparse-checkout set --no-cone "docker"
        fi
        git checkout
      else
        git pull --rebase
      fi

      { set +x; } &> /dev/null
      export GH_TOKEN=$(gh auth token)
      { set -x; } &> /dev/null

      export BTIME=$(cat /proc/stat | grep btime | awk '{print $2}')
      export GH_REPOSITORY="clickup/ci-storage-cdk"
      export GH_LABELS="my-ci,ci-large"
      export FORWARD_HOST="my-ci-host-001.test-zoneName"

      if [[ "$*" != *--called-from-systemd* ]]; then
        sudo systemctl daemon-reload
        sudo systemctl start docker docker.socket
      fi

      cd "docker"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-runner" "main"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-runner" "latest"
      docker compose up --build --remove-orphans -d

      if [[ "$*" != *--no-print-compose-logs* ]]; then
        sleep 5
        docker compose logs -n 10
      fi

      docker system prune --volumes -f
      export deps=$(docker image ls --format "{{.Repository}}:{{.ID}}:{{.Tag}}" | grep dimikot/ci-runner)
      export instanceId=$(cloud-init query ds.meta_data.instance_id)
      aws lambda invoke --function-name "stk-cnstrct-instancetoami" \\
        --cli-binary-format raw-in-base64-out \\
        --payload "$(jq -nc '{"instanceId":$ENV.instanceId,"deps":$ENV.deps}')" \\
        /dev/stdout | jq -s '.[0]'
  - path: /home/ubuntu/.bash_profile
    owner: ubuntu:ubuntu
    permissions: "0644"
    defer: true
    content: |
      #!/bin/bash
      C_CMD="\\033[0;36m"
      C_NO="\\033[0m"
      if [[ -d ~/git/"docker" ]]; then
        cd ~/git/"docker"
        echo "Hint: want to know, how did this instance boot and how did"
        echo "the containers initialize? Run on the instance:"
        echo
        echo '$ less /var/log/cloud-init-output.log'
        echo '$ less /var/log/cloud-init.log'
        echo '$ less /var/log/syslog'
        echo
        echo -e "$C_CMD\\$ docker compose ps$C_NO"
        COLUMNS=500 docker --log-level=ERROR compose ps --format="table {{.Service}}\\t{{.Status}}\\t{{.Ports}}"
        echo
        services=$(docker compose ps --format '{{.Service}}' 2>/dev/null)
        if [[ "$services" != "" && $(echo "$services" | wc -l) -eq 1 ]]; then
          echo "Hint: only one service is running on this instance, $services."
          echo
          echo "For your convenience, we are automatically logging you in"
          echo "its container. Feel free to use any regular Linux commands"
          echo "(ls, pwd, mc etc.) or any dev tools."
          echo
          echo "You can alway exit back to the instance by pressing ^D."
          echo
          cmd="docker compose exec $services bash -l"
          echo -e "$C_CMD\\$ $cmd$C_NO"
          eval "$cmd"
        fi
      fi
",
                ],
              ],
            },
          },
        },
        "LaunchTemplateName": "stk-cnstrct-runnercilarge",
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Stk/Cnstrct/RunnerCiLargeLt",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "CnstrctRunnerCiLargeLtImageCustomResourceDda6e2ce9D95A10B": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CnstrctRunnerCiLargeLtImageCustomResourceDda6e2ceCustomResourcePolicy3191BD69",
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Ref": "CnstrctRunnerCiLargeLtImageFunc67F3A45E",
              },
              "","InvocationType":"RequestResponse","Payload":"{\\"launchTemplateName\\":\\"stk-cnstrct-runnercilarge\\",\\"defaultImageId\\":\\"",
              {
                "Ref": "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "\\",\\"userDataHash\\":\\"131519a026e94d74\\"}"},"physicalResourceId":{"id":"StkCnstrctRunnerCiLargeLtResourceImageCustomResourceDda6e2ce"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Ref": "CnstrctRunnerCiLargeLtImageFunc67F3A45E",
              },
              "","InvocationType":"RequestResponse","Payload":"{\\"launchTemplateName\\":\\"stk-cnstrct-runnercilarge\\",\\"defaultImageId\\":\\"",
              {
                "Ref": "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "\\",\\"userDataHash\\":\\"131519a026e94d74\\"}"},"physicalResourceId":{"id":"StkCnstrctRunnerCiLargeLtResourceImageCustomResourceDda6e2ce"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CnstrctRunnerCiLargeLtImageCustomResourceDda6e2ceCustomResourcePolicy3191BD69": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CnstrctRunnerCiLargeLtImageFunc67F3A45E",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctRunnerCiLargeLtImageCustomResourceDda6e2ceCustomResourcePolicy3191BD69",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctRunnerCiLargeLtImageFunc67F3A45E": {
      "DependsOn": [
        "CnstrctRunnerCiLargeLtImageFuncServiceRoleDefaultPolicyD4F8D404",
        "CnstrctRunnerCiLargeLtImageFuncServiceRoleA8442DD5",
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "from boto3 import client
from os import environ
def handler(event, context):
  launchTemplateName=event["launchTemplateName"]
  defaultImageId=event["defaultImageId"]
  userDataHash=event["userDataHash"]
  res_data = None
  try:
    res = client("ec2").describe_launch_template_versions(
      LaunchTemplateName=launchTemplateName,
      Versions=["$Latest"]
    )
    res_data = res["LaunchTemplateVersions"][0]["LaunchTemplateData"]
    image_id = res_data["ImageId"]
    user_data_hash = next(
      iter(
        tag["Value"]
        for spec in res_data.get("TagSpecifications", [])
        if spec["ResourceType"] == "instance"
        for tag in spec["Tags"]
        if tag["Key"] == "InstanceToAmi:UserDataHash"
      ),
      None
    )
    print(f"describe_launch_template_versions() returned ImageId={image_id} InstanceToAmi:UserDataHash={user_data_hash}")
    if user_data_hash and userDataHash and user_data_hash != userDataHash:
      print(f"returning defaultImageId={defaultImageId} to build the instance from scratch, since UserData has changed")
      return defaultImageId
    else:
      print(f"returning previous Launch Template Version's ImageId={image_id}")
      return image_id
  except Exception as e:
    e_str = f"{e.__class__.__name__}: {str(e)}"
    if "NotFoundException" in e_str:
      print(f"returning defaultImageId={defaultImageId} due to: {e_str}")
      return defaultImageId
    else:
      if res_data:
        print("describe_launch_template_versions() returned LaunchTemplateData: {res_data}")
      print(f"got fatal exception: {e_str}")
      # Hack: return the error instead of ImageId (not throw), since it
      # will be shown right in the CDK deployment error output (because
      # it is not of a valid ImageId format, so CDK will print that and
      # fail anyways, but with a descriptive message).
      return e_str
",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctRunnerCiLargeLtImageFuncServiceRoleA8442DD5",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Cnstrct/RunnerCiLargeLt",
          },
        ],
        "Timeout": 20,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctRunnerCiLargeLtImageFuncServiceRoleA8442DD5": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Cnstrct/RunnerCiLargeLt",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctRunnerCiLargeLtImageFuncServiceRoleDefaultPolicyD4F8D404": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeLaunchTemplateVersions",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctRunnerCiLargeLtImageFuncServiceRoleDefaultPolicyD4F8D404",
        "Roles": [
          {
            "Ref": "CnstrctRunnerCiLargeLtImageFuncServiceRoleA8442DD5",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctRunnerCiLargeLtProfile04AD45AD": {
      "Properties": {
        "Roles": [
          {
            "Ref": "CnstrctRunnerRole341E54FA",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "CnstrctRunnerCiSmallAsgASG02E51BB1": {
      "Properties": {
        "AutoScalingGroupName": "stk-cnstrct-runnercismall",
        "CapacityRebalance": true,
        "Cooldown": "30",
        "DefaultInstanceWarmup": 60,
        "MaxInstanceLifetime": 86400,
        "MaxSize": "10",
        "MetricsCollection": [
          {
            "Granularity": "1Minute",
          },
        ],
        "MinSize": "5",
        "MixedInstancesPolicy": {
          "InstancesDistribution": {
            "OnDemandAllocationStrategy": "lowest-price",
            "OnDemandPercentageAboveBaseCapacity": 10,
            "SpotAllocationStrategy": "price-capacity-optimized",
          },
          "LaunchTemplate": {
            "LaunchTemplateSpecification": {
              "LaunchTemplateId": {
                "Ref": "CnstrctRunnerCiSmallLtC3B1880A",
              },
              "Version": {
                "Fn::GetAtt": [
                  "CnstrctRunnerCiSmallLtC3B1880A",
                  "LatestVersionNumber",
                ],
              },
            },
            "Overrides": [
              {
                "InstanceRequirements": {
                  "MemoryMiB": {
                    "Max": 8192,
                    "Min": 4096,
                  },
                  "VCpuCount": {
                    "Max": 4,
                    "Min": 2,
                  },
                },
              },
            ],
          },
        },
        "Tags": [
          {
            "Key": "Name",
            "PropagateAtLaunch": true,
            "Value": "my-ci-runner-ci-small",
          },
        ],
        "VPCZoneIdentifier": [
          {
            "Ref": "VpcPrivateSubnet1Subnet536B997A",
          },
        ],
      },
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MaxBatchSize": 10,
          "MinInstancesInService": 0,
          "PauseTime": "PT0S",
          "SuspendProcesses": [
            "HealthCheck",
            "ReplaceUnhealthy",
            "AZRebalance",
            "AlarmNotification",
            "ScheduledActions",
            "InstanceRefresh",
          ],
        },
        "AutoScalingScheduledAction": {
          "IgnoreUnmodifiedGroupSizeProperties": true,
        },
      },
    },
    "CnstrctRunnerCiSmallAsgScheduledActionCaWorkDayEnds460D21FE": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctRunnerCiSmallAsgASG02E51BB1",
        },
        "MinSize": 5,
        "Recurrence": "0 18 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctRunnerCiSmallAsgScheduledActionCaWorkDayStarts9BD73C76": {
      "Properties": {
        "AutoScalingGroupName": {
          "Ref": "CnstrctRunnerCiSmallAsgASG02E51BB1",
        },
        "MinSize": 10,
        "Recurrence": "0 8 * * *",
        "TimeZone": "America/Los_Angeles",
      },
      "Type": "AWS::AutoScaling::ScheduledAction",
    },
    "CnstrctRunnerCiSmallLtC3B1880A": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "LaunchTemplateData": {
          "BlockDeviceMappings": [
            {
              "DeviceName": "/dev/sda1",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 20,
                "VolumeType": "gp3",
              },
            },
            {
              "DeviceName": "/dev/sdb",
              "Ebs": {
                "DeleteOnTermination": true,
                "Encrypted": true,
                "VolumeSize": 9,
                "VolumeType": "gp3",
              },
            },
          ],
          "IamInstanceProfile": {
            "Arn": {
              "Fn::GetAtt": [
                "CnstrctRunnerCiSmallLtProfile0EB069BA",
                "Arn",
              ],
            },
          },
          "ImageId": {
            "Fn::Select": [
              1,
              {
                "Fn::Split": [
                  """,
                  {
                    "Fn::GetAtt": [
                      "CnstrctRunnerCiSmallLtImageCustomResourceCa75fca017C422F2",
                      "Payload",
                    ],
                  },
                ],
              },
            ],
          },
          "KeyName": {
            "Fn::GetAtt": [
              "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
              "KeyPairName",
            ],
          },
          "MetadataOptions": {
            "HttpPutResponseHopLimit": 2,
            "HttpTokens": "required",
          },
          "Monitoring": {
            "Enabled": true,
          },
          "SecurityGroupIds": [
            {
              "Fn::GetAtt": [
                "CnstrctSgF5C70BA4",
                "GroupId",
              ],
            },
          ],
          "TagSpecifications": [
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/RunnerCiSmallLt",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "Name",
                  "Value": "Stk/Cnstrct/RunnerCiSmallLt",
                },
              ],
            },
            {
              "ResourceType": "instance",
              "Tags": [
                {
                  "Key": "InstanceToAmi:UserDataHash",
                  "Value": "e081e2b97842c80e",
                },
              ],
            },
            {
              "ResourceType": "volume",
              "Tags": [
                {
                  "Key": "InstanceToAmi:UserDataHash",
                  "Value": "e081e2b97842c80e",
                },
              ],
            },
          ],
          "UserData": {
            "Fn::Base64": {
              "Fn::Join": [
                "",
                [
                  "#cloud-config
timezone: America/Los_Angeles
bootcmd:
  - |
    #!/bin/sh
    cat <<'EOT' > /etc/profile.ssm-user
    #!/bin/sh
    [ "$0$@" = "sh" ] && ENV= sudo -u "ubuntu" -i
    EOT
    dir=/etc/systemd/system/snap.amazon-ssm-agent.amazon-ssm-agent.service.d
    mkdir -p $dir
    cat <<'EOT' > $dir/override.conf
    [Service]
    Environment="ENV=/etc/profile.ssm-user"
    EOT
  - |
    #!/bin/sh
    set -e -x
    mkdir -p /var/log
    empty_device=""
    if ! blkid -L ephemeral; then
      for path in $(find /dev/disk/by-id -name "*Amazon_Elastic_Block_Store*" -a ! -name "*-part*"); do
        find /dev/disk/by-id -wholename "$path-part*" | grep . || empty_device="$path"
      done
      if [ "$empty_device" = "" ]; then
        echo "Cannot find a disk without partitions. Devices:"
        find /dev/disk/by-id
        exit 1
      fi
      mkfs.ext4 -L ephemeral -F "$empty_device"
    fi
    mount -o 'defaults,noatime,exec' -L ephemeral /var/log
    chown 0:syslog /var/log
    chmod 775 /var/log
    mount --bind -o ro / /mnt
    (cd /mnt; if [ "$empty_device" != "" ]; then cp -af "./var/log/." "/var/log"; fi)
    umount /mnt
  - mkdir -p /var/log/atop
  - |
    #!/bin/sh
    set -e -x
    fallocate -l 4G /var/log/swapfile
    chmod 0600 /var/log/swapfile
    mkswap /var/log/swapfile
    swapon /var/log/swapfile
apt:
  sources:
    github-cli.list:
      source: deb https://cli.github.com/packages stable main
      append: false
      keyid: 23F3D4EA75716059
    docker.list:
      source: deb https://download.docker.com/linux/ubuntu $RELEASE stable
      append: false
      keyid: 9DC858229FC7DD38854AE2D88D81803C0EBFCD88
packages:
  - docker-ce=5:27.3.1-1~ubuntu.24.04~noble
  - docker-ce-cli=5:27.3.1-1~ubuntu.24.04~noble
  - containerd.io=1.7.23-1
  - docker-compose-plugin=2.29.7-1~ubuntu.24.04~noble
  - docker-buildx-plugin=0.17.1-1~ubuntu.24.04~noble
  - qemu-system=1:8.2.2+ds-0ubuntu1.4
  - qemu-user-static=1:8.2.2+ds-0ubuntu1.4
  - gh
  - binfmt-support
  - git
  - gosu
  - mc
  - curl
  - apt-transport-https
  - ca-certificates
  - tzdata
  - atop
  - iotop
  - htop
  - bwm-ng
  - jq
  - expect
snap:
  commands:
    "0": snap install aws-cli --classic
write_files:
  - path: /etc/sysctl.d/enable-ipv4-forwarding.conf
    content: |
      net.ipv4.conf.all.forwarding=1
  - path: /etc/default/atop
    content: |
      LOGOPTS="-R"
      LOGINTERVAL=15
      LOGGENERATIONS=4
  - path: /etc/docker/daemon.json
    permissions: "0644"
    content: |
      {
        "log-driver": "syslog",
        "log-opts": {
          "tag": "docker/{{.Name}}"
        },
        "runtimes": {
          "sysbox-runc": {
            "path": "/usr/bin/sysbox-runc"
          }
        },
        "default-runtime": "sysbox-runc",
        "userns-remap": "sysbox",
        "max-concurrent-downloads": 10,
        "max-concurrent-uploads": 100
      }
  - path: /etc/systemd/system/docker.service.d/override.conf
    permissions: "0644"
    content: |
      [Service]
      TimeoutStopSec=3600
      ExecStartPost=/home/ubuntu/run-docker-compose.sh --called-from-systemd
  - path: /etc/cron.d/git-pull-and-rerun-docker-compose-periodically
    permissions: "0644"
    content: |
      */1 * * * * ubuntu /home/ubuntu/run-docker-compose.sh --no-print-compose-logs 2>&1 | logger -t docker/run-docker-compose
  - path: /etc/rsyslog.d/01-docker-tag-to-serial-console.conf
    permissions: "0644"
    content: |
      if $syslogtag startswith 'docker/' then -/dev/console
      # It will also write to /var/log/syslog as usual.
  - path: /var/lib/cloud/scripts/per-once/00-append-etc-environment.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      echo "TZ=America/Los_Angeles" >> /etc/environment
      echo "LESS=RS" >> /etc/environment
  - path: /var/lib/cloud/scripts/per-once/make-apt-get-install-not-run-after-restoring-from-snapshot-to-speedup-boot.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      sed -i -E 's/(- (package-update-upgrade-install|apt-configure|apt-pipelining))/# \\1/g' /etc/cloud/cloud.cfg
  - path: /var/lib/cloud/scripts/per-once/apply-services-configs.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl daemon-reload
      service atop restart || true
      sysctl --system
  - path: /var/lib/cloud/scripts/per-once/add-ubuntu-user-to-docker-group-to-access-socket.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -aG docker ubuntu
  - path: /var/lib/cloud/scripts/per-once/install-sysbox-for-docker-in-docker.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      systemctl stop docker docker.socket || true
      for svc in sysbox-fs sysbox-mgr; do
        dir="/etc/systemd/system/$svc.service.d"
        mkdir -p "$dir"
        {
          echo "[Service]"
          echo "Restart=always"
          echo "RestartSec=5"
          if [[ "$svc" == "sysbox-fs" ]]; then
            echo "ExecStartPost=/bin/systemctl start sysbox-mgr.service"
          fi
        } > "$dir/override.conf"
      done
      version="0.6.6"
      wget -nv -O /tmp/sysbox-ce.deb "https://github.com/nestybox/sysbox/releases/download/v$version/sysbox-ce_$version-0.linux_$(dpkg --print-architecture).deb"
      dpkg -i /tmp/sysbox-ce.deb
      rm -f /tmp/sysbox-ce.deb
  - path: /var/lib/cloud/scripts/per-once/allow-rsyslog-write-to-serial-console.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      usermod -a -G tty syslog
      systemctl restart rsyslog
  - path: /var/lib/cloud/scripts/per-once/install-cloudwatch-agent.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      wget -nv -O /tmp/amazon-cloudwatch-agent.deb https://s3.amazonaws.com/amazoncloudwatch-agent/ubuntu/$(dpkg --print-architecture)/latest/amazon-cloudwatch-agent.deb
      dpkg -i /tmp/amazon-cloudwatch-agent.deb
      systemctl enable amazon-cloudwatch-agent
  - path: /var/lib/cloud/scripts/per-instance/configure-cloudwatch.sh
    permissions: "0755"
    content: |
      #!/bin/bash
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")
      cat > /opt/aws/amazon-cloudwatch-agent/bin/config.json <<EOF
      {
        "agent": {
          "run_as_user": "root",
          "interval": "5s",
          "logfile": "/var/log/amazon-cloudwatch-agent"
        },
        "logs": {
          "logs_collected": {
            "files": {
              "collect_list": [
                {
                  "file_path": "/var/log/cloud-init.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/cloud-init-output.log",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/cloud-init-output.log",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                },
                {
                  "file_path": "/var/log/syslog",
                  "log_group_name": "/aws/ec2/Stk-CnstrctLogs",
                  "log_stream_name": "$(ec2metadata --instance-id)/syslog",
                  "timezone": "LOCAL",
                  "retention_in_days": 7
                }
              ]
            }
          }
        }
      }
      EOF
      /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl \\
        -a fetch-config -m ec2 -s -c file:/opt/aws/amazon-cloudwatch-agent/bin/config.json
      systemctl restart amazon-cloudwatch-agent
  - path: /home/ubuntu/docker-pull-if-changed-rate-limit-friendly.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash
      set -e -o pipefail
      repo="$1"
      name="$2"
      tag="$3"

      if [[ "$repo" == "" || "$name" == "" || "$tag" == "" ]]; then
        echo "Usage: $0 repo name tag"
        exit 1
      fi

      bearer=$(jq -r ".auths[\\"$repo\\"].auth" ~/.docker/config.json || true)
      if [[ "$bearer" == "" ]]; then
        echo "There is no auth token for $repo in ~/.docker/config.json; did you run \\"docker login\\"?"
        exit 2
      fi

      file=~/.docker/$(echo "$repo-$name-$tag" | sed -E 's/[^-_a-zA-Z0-9]/_/g').digest
      old_digest=$(cat "$file" 2>/dev/null || true)
      cur_digest=$(
        curl -sS --fail --head \\
          -H "Authorization: Bearer $bearer" \\
          -H "Accept: application/vnd.oci.image.index.v1+json" \\
          https://$repo/v2/$name/manifests/$tag \\
          | grep -i 'Docker-Content-Digest' | awk '{print $2}' | sed -E 's/\\s+//'
      )

      if [[ "$old_digest" != "$cur_digest" ]]; then
        if docker pull $repo/$name:$tag; then
          echo "$cur_digest" > $file
        else
          code="$?"
          echo "Failed to run \\"docker pull $repo/$name:$tag\\""
          exit "$code"
        fi
      else
        echo "Not pulling $repo/$name:$tag - no changes in manifest since previous pull (digest: $cur_digest)"
      fi
  - path: /home/ubuntu/run-docker-compose.sh
    owner: ubuntu:ubuntu
    permissions: "0755"
    defer: true
    content: |
      #!/bin/bash

      if [[ $(whoami) != "ubuntu" ]]; then
        exec gosu ubuntu "$BASH_SOURCE" "$@"
      fi

      exec {FD}<$BASH_SOURCE
      flock -n "$FD" || { echo "Already running."; exit 0; }
      set -e -o pipefail && echo "================= $(date) | Up $(awk '{print $1}' /proc/uptime) seconds =================" && echo "Running $BASH_SOURCE as $(whoami)" && set -x && export AWS_DEFAULT_REGION=$(ec2metadata --availability-zone | sed "s/[a-z]$//")

      source /etc/environment
      export TZ

      mkdir -p ~/.ssh && chmod 700 ~/.ssh
      aws secretsmanager get-secret-value \\
        --secret-id "ec2-ssh-key/",
                  {
                    "Fn::GetAtt": [
                      "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                      "KeyPairName",
                    ],
                  },
                  "/private" \\
        --query SecretString --output text \\
        | cat > ~/.ssh/ci-storage
      chmod 600 ~/.ssh/ci-storage
      ssh-keygen -f ~/.ssh/ci-storage -y > ~/.ssh/ci-storage.pub

      aws secretsmanager get-secret-value \\
        --secret-id "ci-storage/gh-token" \\
        --query SecretString --output text \\
        | gh auth login --with-token
      gh auth setup-git

      config=~/.docker/config.json
      if [[ ! -f $config ]] || find "$config" -type f -mmin +60 | grep -q .; then
        gh auth token | docker login ghcr.io -u "$(gh api user -q .login)" --password-stdin
      fi

      mkdir -p ~/git && cd ~/git
      if [[ -d .git ]] && ! git fsck; then
        rm -rf ~/git/* ~/git/.*
      fi
      if [[ ! -d .git ]]; then
        git clone -n --depth=1 --filter=tree:0  "https://github.com/dimikot/ci-storage" .
        if [[ "docker" != "." ]]; then
          git sparse-checkout set --no-cone "docker"
        fi
        git checkout
      else
        git pull --rebase
      fi

      { set +x; } &> /dev/null
      export GH_TOKEN=$(gh auth token)
      { set -x; } &> /dev/null

      export BTIME=$(cat /proc/stat | grep btime | awk '{print $2}')
      export GH_REPOSITORY="clickup/ci-storage-cdk"
      export GH_LABELS="my-ci,ci-small"
      export FORWARD_HOST="my-ci-host-001.test-zoneName"

      if [[ "$*" != *--called-from-systemd* ]]; then
        sudo systemctl daemon-reload
        sudo systemctl start docker docker.socket
      fi

      cd "docker"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-runner" "main"
      ~/docker-pull-if-changed-rate-limit-friendly.sh "ghcr.io" "dimikot/ci-runner" "latest"
      docker compose up --build --remove-orphans -d

      if [[ "$*" != *--no-print-compose-logs* ]]; then
        sleep 5
        docker compose logs -n 10
      fi

      docker system prune --volumes -f
      export deps=$(docker image ls --format "{{.Repository}}:{{.ID}}:{{.Tag}}" | grep dimikot/ci-runner)
      export instanceId=$(cloud-init query ds.meta_data.instance_id)
      aws lambda invoke --function-name "stk-cnstrct-instancetoami" \\
        --cli-binary-format raw-in-base64-out \\
        --payload "$(jq -nc '{"instanceId":$ENV.instanceId,"deps":$ENV.deps}')" \\
        /dev/stdout | jq -s '.[0]'
  - path: /home/ubuntu/.bash_profile
    owner: ubuntu:ubuntu
    permissions: "0644"
    defer: true
    content: |
      #!/bin/bash
      C_CMD="\\033[0;36m"
      C_NO="\\033[0m"
      if [[ -d ~/git/"docker" ]]; then
        cd ~/git/"docker"
        echo "Hint: want to know, how did this instance boot and how did"
        echo "the containers initialize? Run on the instance:"
        echo
        echo '$ less /var/log/cloud-init-output.log'
        echo '$ less /var/log/cloud-init.log'
        echo '$ less /var/log/syslog'
        echo
        echo -e "$C_CMD\\$ docker compose ps$C_NO"
        COLUMNS=500 docker --log-level=ERROR compose ps --format="table {{.Service}}\\t{{.Status}}\\t{{.Ports}}"
        echo
        services=$(docker compose ps --format '{{.Service}}' 2>/dev/null)
        if [[ "$services" != "" && $(echo "$services" | wc -l) -eq 1 ]]; then
          echo "Hint: only one service is running on this instance, $services."
          echo
          echo "For your convenience, we are automatically logging you in"
          echo "its container. Feel free to use any regular Linux commands"
          echo "(ls, pwd, mc etc.) or any dev tools."
          echo
          echo "You can alway exit back to the instance by pressing ^D."
          echo
          cmd="docker compose exec $services bash -l"
          echo -e "$C_CMD\\$ $cmd$C_NO"
          eval "$cmd"
        fi
      fi
",
                ],
              ],
            },
          },
        },
        "LaunchTemplateName": "stk-cnstrct-runnercismall",
        "TagSpecifications": [
          {
            "ResourceType": "launch-template",
            "Tags": [
              {
                "Key": "Name",
                "Value": "Stk/Cnstrct/RunnerCiSmallLt",
              },
            ],
          },
        ],
      },
      "Type": "AWS::EC2::LaunchTemplate",
    },
    "CnstrctRunnerCiSmallLtImageCustomResourceCa75fca017C422F2": {
      "DeletionPolicy": "Delete",
      "DependsOn": [
        "CnstrctRunnerCiSmallLtImageCustomResourceCa75fca0CustomResourcePolicyA3F71A05",
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "Create": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Ref": "CnstrctRunnerCiSmallLtImageFuncF5364B8D",
              },
              "","InvocationType":"RequestResponse","Payload":"{\\"launchTemplateName\\":\\"stk-cnstrct-runnercismall\\",\\"defaultImageId\\":\\"",
              {
                "Ref": "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "\\",\\"userDataHash\\":\\"e081e2b97842c80e\\"}"},"physicalResourceId":{"id":"StkCnstrctRunnerCiSmallLtResourceImageCustomResourceCa75fca0"}}",
            ],
          ],
        },
        "InstallLatestAwsSdk": true,
        "ServiceToken": {
          "Fn::GetAtt": [
            "AWS679f53fac002430cb0da5b7982bd22872D164C4C",
            "Arn",
          ],
        },
        "Update": {
          "Fn::Join": [
            "",
            [
              "{"service":"Lambda","action":"invoke","parameters":{"FunctionName":"",
              {
                "Ref": "CnstrctRunnerCiSmallLtImageFuncF5364B8D",
              },
              "","InvocationType":"RequestResponse","Payload":"{\\"launchTemplateName\\":\\"stk-cnstrct-runnercismall\\",\\"defaultImageId\\":\\"",
              {
                "Ref": "SsmParameterValueawsservicecanonicalubuntuserver2404stablecurrentarm64hvmebsgp3amiidC96584B6F00A464EAD1953AFF4B05118Parameter",
              },
              "\\",\\"userDataHash\\":\\"e081e2b97842c80e\\"}"},"physicalResourceId":{"id":"StkCnstrctRunnerCiSmallLtResourceImageCustomResourceCa75fca0"}}",
            ],
          ],
        },
      },
      "Type": "Custom::AWS",
      "UpdateReplacePolicy": "Delete",
    },
    "CnstrctRunnerCiSmallLtImageCustomResourceCa75fca0CustomResourcePolicyA3F71A05": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CnstrctRunnerCiSmallLtImageFuncF5364B8D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctRunnerCiSmallLtImageCustomResourceCa75fca0CustomResourcePolicyA3F71A05",
        "Roles": [
          {
            "Ref": "AWS679f53fac002430cb0da5b7982bd2287ServiceRoleC1EA0FF2",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctRunnerCiSmallLtImageFuncF5364B8D": {
      "DependsOn": [
        "CnstrctRunnerCiSmallLtImageFuncServiceRoleDefaultPolicyC2BBC915",
        "CnstrctRunnerCiSmallLtImageFuncServiceRole12072151",
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "Code": {
          "ZipFile": "from boto3 import client
from os import environ
def handler(event, context):
  launchTemplateName=event["launchTemplateName"]
  defaultImageId=event["defaultImageId"]
  userDataHash=event["userDataHash"]
  res_data = None
  try:
    res = client("ec2").describe_launch_template_versions(
      LaunchTemplateName=launchTemplateName,
      Versions=["$Latest"]
    )
    res_data = res["LaunchTemplateVersions"][0]["LaunchTemplateData"]
    image_id = res_data["ImageId"]
    user_data_hash = next(
      iter(
        tag["Value"]
        for spec in res_data.get("TagSpecifications", [])
        if spec["ResourceType"] == "instance"
        for tag in spec["Tags"]
        if tag["Key"] == "InstanceToAmi:UserDataHash"
      ),
      None
    )
    print(f"describe_launch_template_versions() returned ImageId={image_id} InstanceToAmi:UserDataHash={user_data_hash}")
    if user_data_hash and userDataHash and user_data_hash != userDataHash:
      print(f"returning defaultImageId={defaultImageId} to build the instance from scratch, since UserData has changed")
      return defaultImageId
    else:
      print(f"returning previous Launch Template Version's ImageId={image_id}")
      return image_id
  except Exception as e:
    e_str = f"{e.__class__.__name__}: {str(e)}"
    if "NotFoundException" in e_str:
      print(f"returning defaultImageId={defaultImageId} due to: {e_str}")
      return defaultImageId
    else:
      if res_data:
        print("describe_launch_template_versions() returned LaunchTemplateData: {res_data}")
      print(f"got fatal exception: {e_str}")
      # Hack: return the error instead of ImageId (not throw), since it
      # will be shown right in the CDK deployment error output (because
      # it is not of a valid ImageId format, so CDK will print that and
      # fail anyways, but with a descriptive message).
      return e_str
",
        },
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "CnstrctRunnerCiSmallLtImageFuncServiceRole12072151",
            "Arn",
          ],
        },
        "Runtime": "python3.9",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Cnstrct/RunnerCiSmallLt",
          },
        ],
        "Timeout": 20,
      },
      "Type": "AWS::Lambda::Function",
    },
    "CnstrctRunnerCiSmallLtImageFuncServiceRole12072151": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Cnstrct/RunnerCiSmallLt",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctRunnerCiSmallLtImageFuncServiceRoleDefaultPolicyC2BBC915": {
      "DependsOn": [
        "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "CnstrctRunnerRole341E54FA",
      ],
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": [
                "ec2:DescribeLaunchTemplateVersions",
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctRunnerCiSmallLtImageFuncServiceRoleDefaultPolicyC2BBC915",
        "Roles": [
          {
            "Ref": "CnstrctRunnerCiSmallLtImageFuncServiceRole12072151",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctRunnerCiSmallLtProfile0EB069BA": {
      "Properties": {
        "Roles": [
          {
            "Ref": "CnstrctRunnerRole341E54FA",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "CnstrctRunnerRole341E54FA": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "ManagedPolicyArns": [
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AmazonEC2RoleforSSM",
              ],
            ],
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/CloudWatchAgentServerPolicy",
              ],
            ],
          },
        ],
        "Policies": [
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ec2-ssh-key/",
                        {
                          "Fn::GetAtt": [
                            "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69",
                            "KeyPairName",
                          ],
                        },
                        "/private*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "KeyPairPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "secretsmanager:GetSecretValue",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":secretsmanager:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":secret:ci-storage/gh-token*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "GhTokenPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": "ec2:DescribeTags",
                  "Effect": "Allow",
                  "Resource": "*",
                },
                {
                  "Action": "ec2:CreateTags",
                  "Condition": {
                    "StringEquals": {
                      "ec2:ResourceTag/aws:autoscaling:groupName": [
                        "stk-cnstrct-runnercismall",
                        "stk-cnstrct-runnercilarge",
                      ],
                    },
                  },
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":ec2:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":instance/*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "TagsPolicy",
          },
          {
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "logs:DescribeLogGroups",
                    "logs:DescribeLogStreams",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:*",
                      ],
                    ],
                  },
                },
                {
                  "Action": "logs:CreateLogGroup",
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/ec2/Stk-CnstrctLogs",
                      ],
                    ],
                  },
                },
                {
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:PutLogEvents",
                  ],
                  "Effect": "Allow",
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition",
                        },
                        ":logs:",
                        {
                          "Ref": "AWS::Region",
                        },
                        ":",
                        {
                          "Ref": "AWS::AccountId",
                        },
                        ":log-group:/aws/ec2/Stk-CnstrctLogs:log-stream:*",
                      ],
                    ],
                  },
                },
              ],
              "Version": "2012-10-17",
            },
            "PolicyName": "CloudWatchPolicy",
          },
        ],
        "RoleName": "StkCnstrctRunnerRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "CnstrctRunnerRoleDefaultPolicyCA04641E": {
      "Properties": {
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "lambda:InvokeFunction",
              "Effect": "Allow",
              "Resource": {
                "Fn::GetAtt": [
                  "CnstrctInstanceToAmiStartExecution3968560D",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "CnstrctRunnerRoleDefaultPolicyCA04641E",
        "Roles": [
          {
            "Ref": "CnstrctRunnerRole341E54FA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "CnstrctSgF5C70BA4": {
      "Properties": {
        "GroupDescription": "stk-cnstrct-sg",
        "GroupName": "stk-cnstrct-sg",
        "SecurityGroupEgress": [
          {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "Tags": [
          {
            "Key": "Name",
            "Value": "stk-cnstrct-sg",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C74226B452137": {
      "Properties": {
        "Description": "from stk-cnstrct to SSH",
        "FromPort": 22,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 22,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C74260223B2126BC": {
      "Properties": {
        "Description": "from stk-cnstrct to ci-storage",
        "FromPort": 26022,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 26022,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C74280885707034B": {
      "Properties": {
        "Description": "from stk-cnstrct to ci-scaler",
        "FromPort": 28088,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 28088,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSgfromStkCnstrctSgCE9C2C744200042042B0BB20A9": {
      "Properties": {
        "Description": "from stk-cnstrct to test ports",
        "FromPort": 42000,
        "GroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": {
          "Fn::GetAtt": [
            "CnstrctSgF5C70BA4",
            "GroupId",
          ],
        },
        "ToPort": 42042,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "CnstrctSshIdRsaEC2KeyPairstkcnstrctsshidrsaF4F38F69": {
      "DeletionPolicy": "Delete",
      "Properties": {
        "Description": "Used to access ci-storage host from self-hosted runner nodes.",
        "ExposePublicKey": false,
        "KmsPrivate": "alias/aws/secretsmanager",
        "KmsPublic": "alias/aws/secretsmanager",
        "Name": "stk-cnstrct-sshidrsa",
        "PublicKey": "",
        "PublicKeyFormat": "OPENSSH",
        "RemoveKeySecretsAfterDays": 0,
        "SecretPrefix": "ec2-ssh-key/",
        "ServiceToken": {
          "Fn::GetAtt": [
            "EC2KeyNameManagerLambdaBE629145",
            "Arn",
          ],
        },
        "StackName": "Stk",
        "StorePublicKey": false,
        "Tags": {
          "CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
        },
      },
      "Type": "Custom::EC2-Key-Pair",
      "UpdateReplacePolicy": "Delete",
    },
    "EC2KeyNameManagerLambdaBE629145": {
      "DependsOn": [
        "EC2KeyPairManagerRoleB243C519",
      ],
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Fn::Sub": "cdk-hnb659fds-assets-\${AWS::AccountId}-\${AWS::Region}",
          },
          "S3Key": "<skipped>",
        },
        "Description": "Custom CFN resource: Manage EC2 Key Pairs",
        "FunctionName": "Stk-CFN-Resource-Custom-EC2-Key-Pair",
        "Handler": "index.handler",
        "Role": {
          "Fn::GetAtt": [
            "EC2KeyPairManagerRoleB243C519",
            "Arn",
          ],
        },
        "Runtime": "nodejs18.x",
        "Timeout": 180,
      },
      "Type": "AWS::Lambda::Function",
    },
    "EC2KeyPairManagerPolicyEBBC1576": {
      "Properties": {
        "Description": "Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs",
        "Path": "/",
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "ec2:DescribeKeyPairs",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "ec2:CreateKeyPair",
                "ec2:CreateTags",
                "ec2:ImportKeyPair",
              ],
              "Condition": {
                "StringLike": {
                  "aws:RequestTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ec2:*:*:key-pair/*",
                  ],
                ],
              },
            },
            {
              "Action": [
                "ec2:CreateTags",
                "ec2:DeleteKeyPair",
                "ec2:DeleteTags",
              ],
              "Condition": {
                "StringLike": {
                  "ec2:ResourceTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition",
                    },
                    ":ec2:*:*:key-pair/*",
                  ],
                ],
              },
            },
            {
              "Action": "secretsmanager:ListSecrets",
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:CreateSecret",
                "secretsmanager:TagResource",
              ],
              "Condition": {
                "StringLike": {
                  "aws:RequestTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            {
              "Action": [
                "secretsmanager:DeleteResourcePolicy",
                "secretsmanager:DeleteSecret",
                "secretsmanager:DescribeSecret",
                "secretsmanager:GetResourcePolicy",
                "secretsmanager:GetSecretValue",
                "secretsmanager:ListSecretVersionIds",
                "secretsmanager:PutResourcePolicy",
                "secretsmanager:PutSecretValue",
                "secretsmanager:RestoreSecret",
                "secretsmanager:UntagResource",
                "secretsmanager:UpdateSecret",
                "secretsmanager:UpdateSecretVersionStage",
              ],
              "Condition": {
                "StringLike": {
                  "secretsmanager:ResourceTag/CreatedByCfnCustomResource": "CFN::Resource::Custom::EC2-Key-Pair",
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::ManagedPolicy",
    },
    "EC2KeyPairManagerRoleB243C519": {
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": {
                "Service": "lambda.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Description": "Used by Lambda CFN-Resource-Custom-EC2-Key-Pair, which is a custom CFN resource, managing EC2 Key Pairs",
        "ManagedPolicyArns": [
          {
            "Ref": "EC2KeyPairManagerPolicyEBBC1576",
          },
          {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition",
                },
                ":iam::aws:policy/service-role/AWSLambdaBasicExecutionRole",
              ],
            ],
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "Vpc8378EB38": {
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "VpcIGWD7BA715C": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "VpcPrivateSubnet1DefaultRouteBE02A9ED": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet1NATGateway4D7517AA",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet1RouteTableAssociation70C59FA6": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet1RouteTableB2C5B500",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet1Subnet536B997A",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet1RouteTableB2C5B500": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet1Subnet536B997A": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.128.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPrivateSubnet2DefaultRoute060D2087": {
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "NatGatewayId": {
          "Ref": "VpcPublicSubnet2NATGateway9182C01D",
        },
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPrivateSubnet2RouteTableA678073B": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPrivateSubnet2RouteTableAssociationA89CAD56": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPrivateSubnet2RouteTableA678073B",
        },
        "SubnetId": {
          "Ref": "VpcPrivateSubnet2Subnet3788AAA1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPrivateSubnet2Subnet3788AAA1": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.192.0/18",
        "MapPublicIpOnLaunch": false,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Private",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PrivateSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet1DefaultRoute3DA9E72A": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet1EIPD7E02669": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet1NATGateway4D7517AA": {
      "DependsOn": [
        "VpcPublicSubnet1DefaultRoute3DA9E72A",
        "VpcPublicSubnet1RouteTableAssociation97140677",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet1EIPD7E02669",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet1RouteTable6C95E38E": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet1RouteTableAssociation97140677": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet1RouteTable6C95E38E",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet1Subnet5C2D37C4",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet1Subnet5C2D37C4": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            0,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.0.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet1",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcPublicSubnet2DefaultRoute97F91067": {
      "DependsOn": [
        "VpcVPCGWBF912B6E",
      ],
      "Properties": {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "VpcPublicSubnet2EIP3C605A87": {
      "Properties": {
        "Domain": "vpc",
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::EIP",
    },
    "VpcPublicSubnet2NATGateway9182C01D": {
      "DependsOn": [
        "VpcPublicSubnet2DefaultRoute97F91067",
        "VpcPublicSubnet2RouteTableAssociationDD5762D8",
      ],
      "Properties": {
        "AllocationId": {
          "Fn::GetAtt": [
            "VpcPublicSubnet2EIP3C605A87",
            "AllocationId",
          ],
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
      },
      "Type": "AWS::EC2::NatGateway",
    },
    "VpcPublicSubnet2RouteTable94F7E489": {
      "Properties": {
        "Tags": [
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "VpcPublicSubnet2RouteTableAssociationDD5762D8": {
      "Properties": {
        "RouteTableId": {
          "Ref": "VpcPublicSubnet2RouteTable94F7E489",
        },
        "SubnetId": {
          "Ref": "VpcPublicSubnet2Subnet691E08A3",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "VpcPublicSubnet2Subnet691E08A3": {
      "Properties": {
        "AvailabilityZone": {
          "Fn::Select": [
            1,
            {
              "Fn::GetAZs": "",
            },
          ],
        },
        "CidrBlock": "10.0.64.0/18",
        "MapPublicIpOnLaunch": true,
        "Tags": [
          {
            "Key": "aws-cdk:subnet-name",
            "Value": "Public",
          },
          {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          {
            "Key": "Name",
            "Value": "Stk/Vpc/PublicSubnet2",
          },
        ],
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "VpcVPCGWBF912B6E": {
      "Properties": {
        "InternetGatewayId": {
          "Ref": "VpcIGWD7BA715C",
        },
        "VpcId": {
          "Ref": "Vpc8378EB38",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
  },
  "Rules": {
    "CheckBootstrapVersion": {
      "Assertions": [
        {
          "Assert": {
            "Fn::Not": [
              {
                "Fn::Contains": [
                  [
                    "1",
                    "2",
                    "3",
                    "4",
                    "5",
                  ],
                  {
                    "Ref": "BootstrapVersion",
                  },
                ],
              },
            ],
          },
          "AssertDescription": "CDK bootstrap stack version 6 required. Please run 'cdk bootstrap' with a recent version of the CDK CLI.",
        },
      ],
    },
  },
}
`;
